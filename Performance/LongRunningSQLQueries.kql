traces
| where timestamp > ago(60d) // adjust as needed
| where operation_Name == 'Long Running Operation (SQL Query)' // do note that in a later version of the schema, this field will not be used (a new field in custom dimensions will be used)
| extend alObjectId = customDimensions.alObjectId
| where alObjectId > 0 // filter out internal server calls
| extend aadTenantId = customDimensions.aadTenantId
       , executionTime = customDimensions.executionTime
       , sqlStatement = tostring( customDimensions.sqlStatement )
| extend alObjectName = tostring( customDimensions.alObjectName )
, alObjectType = tostring( customDimensions.alObjectType )
, alStackTrace = tostring( customDimensions.alStackTrace )
, clientType = tostring( customDimensions.clientType )
, companyName = tostring( customDimensions.companyName )
, component = customDimensions.component
, componentVersion = customDimensions.componentVersion
, environmentName = tostring( customDimensions.['Environment name'] )
, environmentType = tostring( customDimensions.environmentType )
, executionTimeInMS = toreal(totimespan(executionTime))/10000 //the datatype for executionTime is timespan 
// this part of the query derives various insights from the SQL statement
| extend operationType = case(
  sqlStatement startswith "UPDATE", "UPDATE"
, sqlStatement startswith "DELETE", "DELETE"
, sqlStatement startswith "BeginTransaction", "BEGIN_TRANS"
, sqlStatement matches regex "INSERT INTO", "INSERT"
, sqlStatement startswith "SELECT", "SELECT"
, sqlStatement matches regex "IF EXISTS \\(SELECT (.*)\\) SELECT", "SELECT'"
, sqlStatement has "SELECT NEXT VALUE FOR", "SELECT_SEQUENCE_VALUE"
, sqlStatement has "SELECT @@SPID", "SELECT_SPID"
, sqlStatement matches regex "(.*)WITH", "SELECT"
, sqlStatement startswith "CREATE TABLE", "CREATE_TABLE"
, sqlStatement startswith "ALTER TABLE", "ALTER_TABLE"
, sqlStatement startswith "exec sp_rename", "RENAME_TABLE" 
, sqlStatement matches regex "(.*)DROP TABLE", "DROP_TABLE"
, sqlStatement startswith "SET LOCK_TIMEOUT", "SET_LOCK_TIMEOUT"
, sqlStatement has "sp_getapplock", "GET_APP_LOCK"
, "UNKNOWN"
)
, numberOfJoins = countof(sqlStatement, "JOIN") 
, numberOfOuterApplys = countof(sqlStatement, "OUTER APPLY") 
, extensionIdsFromJOIN = tostring( extract_all("JOIN \"SQLDATABASE\"\\.dbo\\.\"CURRENTCOMPANY\\$.+?\\$(\\S+?)\"", sqlStatement) )
| parse kind=regex sqlStatement with selectPart:string "FROM" rest:string
| extend numberOfColumnsSelected = case(
operationType == "SELECT", countof(selectPart,",") + 1
, operationType == "SELECT'", countof(selectPart,",") + 1
, 0
)
| order by executionTimeInMS desc