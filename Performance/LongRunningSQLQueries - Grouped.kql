//Slowest objects, grouped

traces
| where customDimensions has 'customername'
| where timestamp > ago(7d) // adjust as needed
| where operation_Name == 'Long Running Operation (SQL Query)' // do note that in a later version of the schema, this field will not be used (a new field in custom dimensions will be used)
| extend aadTenantId = tostring( customDimensions.aadTenantId )
, environmentName = customDimensions.environmentName
, environmentType = customDimensions.environmentType
, alMethod = tostring( customDimensions.alMethod )
, alObjectId = toint( customDimensions.alObjectId )
, alObjectName = tostring( customDimensions.alObjectName )
, alObjectType = tostring(customDimensions.alObjectType)
, executionTime = customDimensions.executionTime
, executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000 //the datatype for executionTime is timespan 
, extensionName = tostring( customDimensions.extensionName )
, sqlStatement = tostring(customDimensions.sqlStatement)
| extend operationType = case(
    sqlStatement startswith "UPDATE", "UPDATE"
    , sqlStatement startswith "DELETE", "DELETE"
    , sqlStatement startswith "BeginTransaction", "BEGIN_TRANS"
    , sqlStatement matches regex "INSERT INTO", "INSERT"
    , sqlStatement startswith "SELECT", "SELECT"
    , sqlStatement matches regex "IF EXISTS \\(SELECT (.*)\\) SELECT", "SELECT'"
    , sqlStatement has "SELECT NEXT VALUE FOR", "SELECT_SEQUENCE_VALUE"
    , sqlStatement has "SELECT @@SPID", "SELECT_SPID"
    , sqlStatement matches regex "(.*)WITH", "SELECT"
    , sqlStatement startswith "CREATE TABLE", "CREATE_TABLE"
    , sqlStatement startswith "ALTER TABLE", "ALTER_TABLE"
    , sqlStatement startswith "exec sp_rename", "RENAME_TABLE" 
    , sqlStatement matches regex "(.*)DROP TABLE", "DROP_TABLE"
    , sqlStatement startswith "SET LOCK_TIMEOUT", "SET_LOCK_TIMEOUT"
    , sqlStatement has "sp_getapplock", "GET_APP_LOCK"
    , "UNKNOWN"
    ) 
| extend executionTimeInSec = executionTimeInMS / 1000
| summarize count(), dcount( aadTenantId ), sum( executionTimeInSec ), avg( executionTimeInSec ) by operationType, alMethod, alObjectType, alObjectName, extensionName
| order by avg_executionTimeInSec desc 
| limit 20