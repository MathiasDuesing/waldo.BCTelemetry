{
    "$schema": "https://dataexplorer.azure.com/static/d/schema/52/dashboard.json",
    "id": "01e92ba5-117b-496c-ad7e-37f2eacc037b",
    "eTag": "c5a75b05-6341-4928-96b0-e17e7861a2d2",
    "schema_version": "52",
    "title": "iFactoBE_Customers",
    "tiles": [
        {
            "id": "58a9d2a6-ef15-45a7-a081-8bd645783134",
            "title": "Count per company",
            "visualType": "table",
            "pageId": "e0ea770f-baf5-47a6-88b1-1cb0ec5dce59",
            "layout": {
                "x": 0,
                "y": 19,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ad53463a-5499-4cae-b20b-fe9317c44d40"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "36af83a5-9ea2-437f-b877-1a994d272189",
            "title": "Count per eventId",
            "visualType": "table",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 5
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d72a9b03-a526-4583-a343-c046eb1ba9c7"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "493ffb0e-905d-4269-96cd-34ef121ba65f",
            "title": "Events",
            "visualType": "table",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 49,
                "width": 21,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "849828c7-18b5-4b94-90c7-56fa77bca74d"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [
                    {
                        "urlColumn": "LearnUrl",
                        "displayColumn": "eventId",
                        "disabled": false
                    }
                ],
                "colorRules": []
            }
        },
        {
            "id": "d796a89e-5f66-4992-bb0b-8d5130c4fd5f",
            "title": "Signals per Area",
            "visualType": "table",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 0,
                "y": 23,
                "width": 5,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "acaf0b25-2ab3-493d-b555-3a9d821a4ab6"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "c6ffe9c3-dc2d-4035-893a-cd2de16dc879",
            "title": "Custom Events (Microsoft)",
            "visualType": "table",
            "pageId": "f56f5822-56bf-4758-a589-1e398df2aeee",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 11,
                "height": 14
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1068d9b9-0ac0-452a-a862-ddab07f4ebd3"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "5d761873-80b0-4e93-84ef-b27472d05f1a",
            "title": "Custom Events (Not Microsoft)",
            "visualType": "table",
            "pageId": "f56f5822-56bf-4758-a589-1e398df2aeee",
            "layout": {
                "x": 11,
                "y": 0,
                "width": 11,
                "height": 14
            },
            "queryRef": {
                "kind": "query",
                "queryId": "fef7722c-9493-4354-be87-f82b023e84d3"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "58e67413-3cc1-4564-8e5a-a0d73bbfe552",
            "title": "Telemetry on Tests (Last 10000)",
            "visualType": "table",
            "pageId": "fbdd4db5-d977-4a56-997e-4043d8c0645f",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 18,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "8eb99ab2-0a8c-467d-99a1-b9e8d8a81805"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "eb1403d0-3a9e-4657-ac02-ebc2bdb2a04e",
            "title": "Test Regression (NoOfSqlStatements)",
            "visualType": "line",
            "pageId": "fbdd4db5-d977-4a56-997e-4043d8c0645f",
            "layout": {
                "x": 0,
                "y": 7,
                "width": 18,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "5f38a55b-af52-4ef8-aef5-7f7406256562"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgNoOfSqlStatements"
                ],
                "seriesColumns": [
                    "FQMethod"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "7bfebbac-36c9-4eb1-9ec0-21b1ffc1919c",
            "title": "All Executions (Filter on MeasuredFunction) (Last 100)L",
            "visualType": "table",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1d71e967-825a-4778-8dfe-56ebe5db8c76"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "2b3554f0-62a7-4f05-8645-775d16ce0537",
            "title": "Averages per customers (Filter on MeasuredFunction)",
            "visualType": "table",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 12,
                "y": 0,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "0286c045-54a3-410f-94f8-cc88865fa119"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "879a3f9f-2039-47dc-bf27-5b7e41ffa086",
            "title": "AvgDuration per Tenant.Message per day",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 38,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "79a46816-c798-4ef1-817b-c91e061fad27"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgDuration"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "db42d8cc-fc8f-4d9d-a468-f42b7d9c5b15",
            "title": "Last 1000 Missing Indexes",
            "visualType": "table",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 0,
                "y": 2,
                "width": 19,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "bae4024a-0ed8-4a66-8518-b9d366b5e60d"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "902f4361-9100-49e1-b7f0-a503960e3ff3",
            "title": "Missing Indexes (By missing index)",
            "visualType": "table",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 0,
                "y": 10,
                "width": 13,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "b8d49c39-2ca0-44e6-9701-6efbd39fcbf1"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "370c3e16-a1a1-46c0-9a70-931ece74d3ac",
            "title": "Missing Indexes per Customer",
            "visualType": "table",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 13,
                "y": 10,
                "width": 6,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "91318bec-fc4f-4ede-977f-8081bc9b94cb"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "a3abee56-9597-4fa6-9076-f91c8577cc18",
            "title": "Missing indexes over time",
            "visualType": "stackedcolumn",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 0,
                "y": 18,
                "width": 19,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ab4a2a55-7797-41f6-a345-b36035555e41"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "037f192e-e64c-4a41-8406-93bfb5334e5e",
            "title": "Media Orphans Info",
            "visualType": "table",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 0,
                "y": 28,
                "width": 9,
                "height": 11
            },
            "queryRef": {
                "kind": "query",
                "queryId": "8d67f15b-e4d6-40ad-aaa9-16576cbd1a08"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "aea7e8a4-6a7a-4bd2-8f70-b79ba6e99ce6",
            "title": "2.",
            "visualType": "markdownCard",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 0,
                "y": 25,
                "width": 19,
                "height": 3
            },
            "markdownText": "# Media Orphans Info\n",
            "visualOptions": {}
        },
        {
            "id": "a3f0dce1-796d-4af3-8d3b-ea8f967d69ec",
            "title": "1.",
            "visualType": "markdownCard",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 19,
                "height": 2
            },
            "markdownText": "# Missing Indexes\n",
            "visualOptions": {}
        },
        {
            "id": "aaeb043d-d981-40c7-8b77-807143029777",
            "title": "Orphan problems",
            "visualType": "column",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 0,
                "y": 39,
                "width": 19,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "99267696-d8d5-47a4-81d2-ad6a9213ba61"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": [
                    "message",
                    "aadTenantId"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "b09c500b-5a3d-4c3d-96f7-ee65f204728a",
            "title": "Current Orphans per customer",
            "visualType": "table",
            "pageId": "9c16317e-23f7-4e29-8a61-dfae292ea6d0",
            "layout": {
                "x": 9,
                "y": 28,
                "width": 10,
                "height": 11
            },
            "queryRef": {
                "kind": "query",
                "queryId": "dd5bda32-e0ba-4bc5-b7b2-9579b7921ec6"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "8b18a687-a7ff-4d33-bffc-0d2ab9c25025",
            "title": "1.",
            "visualType": "markdownCard",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 20,
                "height": 3
            },
            "markdownText": "# Partial Records\n",
            "visualOptions": {}
        },
        {
            "id": "13d901f3-4d4b-4c9c-9709-7dfc79754f58",
            "title": "Partial Records (Most columns on top)",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 0,
                "y": 3,
                "width": 20,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "62457db5-a6a8-4ec6-88f9-a01f98c49903"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "0bf7f557-415a-4742-bca6-bf0fbf8357c9",
            "title": "No Of Columns by Extension",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 0,
                "y": 12,
                "width": 10,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "b78b3b13-0972-4df3-8925-0931689e2e89"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "ede47df1-472f-434c-bfc3-00b8a0f0c83a",
            "title": "No Of Columns by Table",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 10,
                "y": 12,
                "width": 10,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "98dfa888-edb5-47cc-ba0e-8e880596e434"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "8beffbc9-847c-4980-8699-58206c9c9851",
            "title": "2.",
            "visualType": "markdownCard",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 0,
                "y": 19,
                "width": 20,
                "height": 3
            },
            "markdownText": "# Locking",
            "visualOptions": {}
        },
        {
            "id": "663a3dd0-2c2e-41e5-b816-15f8e709ff4b",
            "title": "Locking IsEmpty",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 0,
                "y": 22,
                "width": 13,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "28e70b6f-3eb2-4c0b-bb30-c973d39ab1c1"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "c520b0d4-e9e8-4cb2-816f-c0f8077cbcbb",
            "title": "IsEmpty by Extension",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 13,
                "y": 22,
                "width": 7,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "b61f7297-4a16-4c8c-9043-b1b11ea25a5b"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "a985afb8-3934-4da9-920c-d61dceee5383",
            "title": "Locking Calcsums",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 0,
                "y": 28,
                "width": 13,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "a9f12f5d-984e-4e18-8393-e8bb8ba6f9d1"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "71c09f6b-3125-4a80-9d49-27a28b47e2f9",
            "title": "Calcsums by Extension",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 13,
                "y": 28,
                "width": 7,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "c506d87f-df7a-48ab-bb83-77df77cf10e8"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "d6721bfe-13f2-4b0f-b9f1-cba1422c9584",
            "title": "Locking Counts",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 0,
                "y": 34,
                "width": 13,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "937ccec9-23d8-4dcb-8703-ef0040650193"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "e87dead3-c5f4-4ce2-bedb-bbfab681531a",
            "title": "Count by Extension",
            "visualType": "table",
            "pageId": "2546cc61-63e2-4e89-8157-d2977e6ddde6",
            "layout": {
                "x": 13,
                "y": 34,
                "width": 7,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "106149f3-1147-4c15-bae0-5174e379ddd4"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "8dc2d36b-69e2-4d37-8e20-29ddd36df1e3",
            "title": "Last Deadlocks",
            "visualType": "table",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 0,
                "y": 3,
                "width": 13,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "3f746118-38e0-484b-b725-89d738a38f15"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "dd110ace-993f-4bda-9fa9-c88ce5a3ba84",
            "title": "DeadLocks By Customer",
            "visualType": "table",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 13,
                "y": 3,
                "width": 8,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "151f25fc-9e44-4289-8a43-1185d398bf26"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "7fc032e1-51ee-466f-ba81-fea165764dd6",
            "title": "Deadlocks by hour",
            "visualType": "stackedcolumn",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 0,
                "y": 10,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ba26a4f4-d6bf-4c9d-9290-51f9c25ace3f"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "6d2e8a36-4f35-401b-8e59-a179df48be20",
            "title": "Per SourceProcess",
            "visualType": "table",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 0,
                "y": 16,
                "width": 21,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "9eaa84a1-7aab-4383-9c5e-96f42c1815a5"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "6a28c367-2f8d-4518-9c64-3f56a4f635b2",
            "title": "Locking Object",
            "visualType": "pie",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 11,
                "y": 24,
                "width": 10,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d3c4f6ca-b07d-4112-9668-3a32082658a5"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": "LockingObject",
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "5ae67d35-441f-4f50-b4cb-581ce485b7d7",
            "title": "Source Process",
            "visualType": "pie",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 0,
                "y": 24,
                "width": 11,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d3ae8ab3-c9fe-4bdc-b912-3bbdc17a0b1f"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": "SourceProcess",
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": true,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "202772f1-642c-4f03-8fc8-2c3221d51ec1",
            "title": ".",
            "visualType": "markdownCard",
            "pageId": "9986d334-d966-4ec6-a436-4e6e6228711d",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 3
            },
            "markdownText": "# Lock Timeouts\r\n\r\n*“The operation could not complete because a record in the [table name] table was locked by another user. Please retry the activity.”*",
            "visualOptions": {}
        },
        {
            "id": "c54267c7-cd9f-4d7d-ace5-07c4f51753b6",
            "title": "Last Lock Timeouts",
            "visualType": "table",
            "pageId": "9986d334-d966-4ec6-a436-4e6e6228711d",
            "layout": {
                "x": 0,
                "y": 3,
                "width": 14,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d7ec2d0a-3172-47bd-92de-2ecd84120987"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "d0ae2747-309d-494b-82cd-8d799cc46c1b",
            "title": "Lock Timeouts By Customer",
            "visualType": "table",
            "pageId": "9986d334-d966-4ec6-a436-4e6e6228711d",
            "layout": {
                "x": 14,
                "y": 3,
                "width": 7,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "0e173c7f-e33e-40ec-bde6-f2815ab2252c"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "78fba414-a825-4909-8160-cd65063e2aff",
            "title": "Lock Timeouts by hour",
            "visualType": "stackedcolumn",
            "pageId": "9986d334-d966-4ec6-a436-4e6e6228711d",
            "layout": {
                "x": 0,
                "y": 10,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "e9f675cb-29b6-4424-a1e2-3a5067c07d33"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": [
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "73b1cef1-fe54-4213-ac87-3f5684c4c233",
            "title": "Lock Timeouts by Source Process",
            "visualType": "pie",
            "pageId": "9986d334-d966-4ec6-a436-4e6e6228711d",
            "layout": {
                "x": 0,
                "y": 16,
                "width": 11,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "c0d91ac3-7acd-45cf-aef3-2e7df92ee41c"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": "SourceProcess",
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": true,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "0c2d9c72-e771-46c9-901c-ee85b05bf01f",
            "title": "Lock Timeouts by Locking Object",
            "visualType": "pie",
            "pageId": "9986d334-d966-4ec6-a436-4e6e6228711d",
            "layout": {
                "x": 11,
                "y": 16,
                "width": 10,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ceec8299-6e70-4823-9056-700f22863dd3"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": "LockingObject",
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "00cfeb83-510c-4317-97b7-34c2772c1e2c",
            "title": ".",
            "visualType": "markdownCard",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 3
            },
            "markdownText": "# Deadlocks\r\n\r\n*“The activity was deadlocked with another user who was modifying the [table name] table. Please retry the activity.”*\r\n",
            "visualOptions": {}
        },
        {
            "id": "7d036709-66c6-4a5f-977b-5c2984d9c050",
            "title": "API Calls by Customer (RT0008)",
            "visualType": "table",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 12,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "fefc7f6f-ce05-4b7f-ab75-dec8ce4d9117"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "c5718320-ed81-4242-8837-c2baa39149db",
            "title": "By Day (RT0008)",
            "visualType": "column",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 12,
                "y": 0,
                "width": 9,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "541bf1fb-16f1-4cdd-8e4a-547f51a133d3"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgTime"
                ],
                "seriesColumns": [
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "25cd2e5e-a56f-4836-90ec-76bbaaa8403c",
            "title": "Number of signals per day (-30d)",
            "visualType": "timechart",
            "pageId": "e0ea770f-baf5-47a6-88b1-1cb0ec5dce59",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "04b7d54d-6bf2-4952-96dd-d3d3f42b51a6"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "827edbab-5dad-4efe-8f09-f4dcb58d82bc",
            "title": "Per Object (Incl. Queryfilter)",
            "visualType": "table",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 6,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "5b2f6f11-232e-4960-8f6a-70c570bf2293"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "7e173913-870b-4a69-9612-2b9808f19254",
            "title": "Top 10 Companies (highest usages)",
            "visualType": "bar",
            "pageId": "e0ea770f-baf5-47a6-88b1-1cb0ec5dce59",
            "layout": {
                "x": 0,
                "y": 12,
                "width": 21,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "2d06aa6b-32d2-4408-8e5c-b4e7d09f00df"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "9690b5e2-14b1-43d6-9679-dfc7fcb765e4",
            "title": "Base Query - Sanity check",
            "visualType": "bar",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 0,
                "y": 33,
                "width": 21,
                "height": 5
            },
            "queryRef": {
                "kind": "query",
                "queryId": "993241f6-5675-4f33-8cac-331a3c512628"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": [
                    "Count"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "715ec90f-2677-4b05-9519-019044f90a70",
            "title": "TenantDescriptions (external data)",
            "visualType": "table",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 0,
                "y": 11,
                "width": 11,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "58f01ab5-5d84-4847-bda3-2b78e43ee679"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "b00671f6-d51a-4b8e-8bce-7ec63dd93eda",
            "title": "Slowest SQL, per customer (Top 1000)",
            "visualType": "table",
            "pageId": "142b6efb-d730-4b92-a9f1-c8311c35f795",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4b150885-b38a-4517-93bb-a99ee9c80484"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "94b63d5e-c7e9-4b93-b424-da05e32d56c9",
            "title": "API Calls per hour, count per endpoint",
            "visualType": "stackedcolumn",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 18,
                "width": 21,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "af89f492-93e8-4839-b5d4-9adbbb0e1547"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": [
                    "endpoint",
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "c6f03b3d-9a8f-4c1a-85c4-31fcad5ed112",
            "title": "Latest 1000 calls",
            "visualType": "table",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 12,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "2f9bb530-235a-41fe-a985-e634c73d2b42"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": false,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": [
                    {
                        "id": "204f1424-db50-45f9-9821-f98f3458f3a5",
                        "ruleType": "colorByCondition",
                        "applyToColumn": null,
                        "hideText": false,
                        "applyTo": "cells",
                        "conditions": [
                            {
                                "operator": ">",
                                "column": "count",
                                "values": [
                                    "10000"
                                ]
                            }
                        ],
                        "chainingOperator": "and",
                        "colorStyle": "bold",
                        "color": "yellow",
                        "tag": "",
                        "icon": "critical",
                        "ruleName": "",
                        "visualType": "table"
                    }
                ]
            }
        },
        {
            "id": "58c00ae2-bd81-4052-a198-b2f3d7c1ed2c",
            "title": "Last Slow SQL Calls (Top 1000) (SourceProcess, SlowObject)",
            "visualType": "table",
            "pageId": "142b6efb-d730-4b92-a9f1-c8311c35f795",
            "layout": {
                "x": 0,
                "y": 6,
                "width": 21,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d3eaf6da-e33f-4df0-a51f-7bdc7a6b74be"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "0b4d1b24-4def-42d0-87a5-df6e61b0633f",
            "title": "Per Slow Object",
            "visualType": "pie",
            "pageId": "142b6efb-d730-4b92-a9f1-c8311c35f795",
            "layout": {
                "x": 0,
                "y": 15,
                "width": 11,
                "height": 13
            },
            "queryRef": {
                "kind": "query",
                "queryId": "84119f35-8a26-4a44-ae1b-522f34cb52ff"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": [
                    "count_"
                ],
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "d8c5d187-b5b1-4731-afbd-da8381a048bb",
            "title": "Per Slow Object",
            "visualType": "table",
            "pageId": "142b6efb-d730-4b92-a9f1-c8311c35f795",
            "layout": {
                "x": 11,
                "y": 15,
                "width": 10,
                "height": 13
            },
            "queryRef": {
                "kind": "query",
                "queryId": "211fa387-be45-48ce-91e0-a5622c028478"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "5ebc4c93-b493-4c81-b441-24960368e3eb",
            "title": "BCPT Runs - NoOfSqlStatements (30 Days)",
            "visualType": "line",
            "pageId": "c57aad53-d31f-4c8c-a0b7-39424d755d88",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "596d541c-2ab6-4ed0-9769-d18f33766c72"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": [
                    "avgNoOfSqlStatements"
                ],
                "seriesColumns": [
                    "Tag"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "ec6c0ac5-6294-4c0c-9788-ee6466898213",
            "title": "BCPT Runs - Durations (30 Days)",
            "visualType": "line",
            "pageId": "c57aad53-d31f-4c8c-a0b7-39424d755d88",
            "layout": {
                "x": 0,
                "y": 7,
                "width": 21,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "e015b09f-59c2-4fa5-9463-e00e7f38ef19"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgNoOfSqlStatements",
                    "avgDuration"
                ],
                "seriesColumns": [
                    "Tag"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "47c0c751-736f-4061-bbb9-be17297c2cc1",
            "title": "Errors",
            "visualType": "line",
            "pageId": "c57aad53-d31f-4c8c-a0b7-39424d755d88",
            "layout": {
                "x": 0,
                "y": 14,
                "width": 21,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d7e329ec-1be0-4b5f-a76a-7528f76a4e88"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": [
                    "count"
                ],
                "seriesColumns": [
                    "Tag"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "178cb4f2-f43e-4dc6-853f-2de935e3978b",
            "title": "Error details",
            "visualType": "table",
            "pageId": "c57aad53-d31f-4c8c-a0b7-39424d755d88",
            "layout": {
                "x": 0,
                "y": 21,
                "width": 21,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "855b24d7-74f8-4f41-9b7b-d51f91334ca1"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "0e7227ca-97f1-46b3-a1a3-d5d6998a8608",
            "title": "Number of signals (24h)",
            "visualType": "timechart",
            "pageId": "e0ea770f-baf5-47a6-88b1-1cb0ec5dce59",
            "layout": {
                "x": 0,
                "y": 6,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "399919e2-8c95-4276-b710-77860edf6192"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "a346d734-4956-493f-b85a-5477d1af662f",
            "title": "Count by Customer",
            "visualType": "pie",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 34,
                "width": 10,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "e5234813-5d6a-4ade-b945-f3bfe26ec490"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "679a5717-27a4-461a-a616-c27e29b8ca02",
            "title": "Count by endpoint",
            "visualType": "pie",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 10,
                "y": 34,
                "width": 11,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "23c4e66b-075f-4034-9704-6a7a21c7308d"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "aca890ab-3b07-4a1c-b977-86febf469eac",
            "title": "Edit In Excel",
            "visualType": "table",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 42,
                "width": 21,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ef4ad8cf-50d4-4970-8008-b016d49f173c"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "51faf9f2-29fc-41aa-9e41-5ca887283ac2",
            "title": "Base Query (last 100)",
            "visualType": "table",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 0,
                "y": 17,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "5741837b-3d01-4010-8da9-db6401627f0d"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "c035ab58-013f-47d5-b275-9352338414d3",
            "title": "API Calls per hour, avgTotalTime per endpoint",
            "visualType": "stackedcolumn",
            "pageId": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
            "layout": {
                "x": 0,
                "y": 26,
                "width": 21,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1707f0fd-c4db-448d-a617-3e1a3c7a4e25"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgTotalTime"
                ],
                "seriesColumns": [
                    "endpoint",
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": true,
                "drillthroughDisabled": true,
                "crossFilter": [
                    {
                        "interaction": "dragX",
                        "property": "timeRange",
                        "parameterId": "39cdef5b-3452-4363-abb8-14af11fec305",
                        "disabled": false
                    }
                ],
                "drillthrough": []
            }
        },
        {
            "id": "74c9cecc-a291-4354-88cc-58b511bc3790",
            "title": "avgNoOfSqlStatements per Tenant.Message",
            "visualType": "pie",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 12,
                "y": 70,
                "width": 12,
                "height": 11
            },
            "queryRef": {
                "kind": "query",
                "queryId": "262f4783-c556-40d5-bae2-0e961cf9337c"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": "TenantMeasuredFunction",
                "yColumns": [
                    "avgNoSqlStatements"
                ],
                "seriesColumns": [
                    "message",
                    "tenantDescription"
                ],
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "9efe342f-9f99-4231-a250-abf2c06a2a27",
            "title": "AvgElapsedTime By SourceProcess",
            "visualType": "pie",
            "pageId": "142b6efb-d730-4b92-a9f1-c8311c35f795",
            "layout": {
                "x": 0,
                "y": 28,
                "width": 21,
                "height": 13
            },
            "queryRef": {
                "kind": "query",
                "queryId": "49052ba3-baff-434e-a2fc-77a788f4bfec"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "6eb4632f-48d6-436a-8b9f-1084861360d6",
            "title": "AvgElapsedTime By SlowObject",
            "visualType": "pie",
            "pageId": "142b6efb-d730-4b92-a9f1-c8311c35f795",
            "layout": {
                "x": 0,
                "y": 41,
                "width": 21,
                "height": 13
            },
            "queryRef": {
                "kind": "query",
                "queryId": "a9d71a9c-8539-4b4b-98a4-0855485897fc"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "0ee463f7-8139-4005-a79c-d5d0c3f2599e",
            "title": "Slow SQL Calls, Per day, per customer",
            "visualType": "stackedcolumn",
            "pageId": "142b6efb-d730-4b92-a9f1-c8311c35f795",
            "layout": {
                "x": 0,
                "y": 54,
                "width": 21,
                "height": 13
            },
            "queryRef": {
                "kind": "query",
                "queryId": "5befc736-26de-4200-a0a9-977911ee53eb"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": [
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "050fa23f-ec08-4e79-91b8-04aa8c9270ce",
            "title": "Signals (from GitHub)",
            "visualType": "table",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 0,
                "y": 5,
                "width": 11,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "629a37ee-dd78-4782-b8e2-a9424b420c9a"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "ae6723e9-460a-40d4-adce-3e0afaa0bb12",
            "title": "Slowest \"anything\", per customer (Top 100)",
            "visualType": "table",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 21,
                "height": 6
            },
            "queryRef": {
                "kind": "query",
                "queryId": "fe2df169-4312-444d-aafa-49c4d1dc6f21"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "3f1c7a8c-40b8-4cf5-91e6-c828aeda209e",
            "title": "Last Slow AL (Top 1000) (SourceProcess, SlowObject)",
            "visualType": "table",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 6,
                "width": 21,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "15930a4b-a6ee-467a-aa40-d96a3d3eca90"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "cf4d3bbf-a403-4f15-970c-a237f61d577e",
            "title": "Last Slow AL (Top 1000) (SourceProcess, SlowObject)",
            "visualType": "table",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 74,
                "width": 21,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "65ca5e05-10b4-495e-90d2-5586bb7cc037"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "1516659e-c80b-48f8-925a-136deb056062",
            "title": "Per Slow Object",
            "visualType": "pie",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 15,
                "width": 11,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "8f598188-08d1-46ca-a0ae-ec3493f46a36"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": [
                    "count_"
                ],
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "f20cc370-a434-49b1-afb7-a2e766af424e",
            "title": "Per Slow Object",
            "visualType": "table",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 11,
                "y": 15,
                "width": 10,
                "height": 17
            },
            "queryRef": {
                "kind": "query",
                "queryId": "6371b185-f7e3-48e6-8fcc-319dd18a4838"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "9fe6fc60-2350-440b-a41a-b90085ba8afe",
            "title": "AvgElapsedTime By SourceProcess",
            "visualType": "pie",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 22,
                "width": 11,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "823b2d94-9a33-46ce-87e2-c7d8916ca2dd"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "1f10898b-bae1-4031-b2d8-50f588912536",
            "title": "AvgElapsedTime By SlowObject",
            "visualType": "pie",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 32,
                "width": 21,
                "height": 13
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4037ee5f-d0b5-41ea-8e7d-4ff3d7b68184"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "b3b7888a-f567-4d49-83be-c7af234512b3",
            "title": "Slow AL, Per day, per customer",
            "visualType": "stackedcolumn",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 61,
                "width": 21,
                "height": 13
            },
            "queryRef": {
                "kind": "query",
                "queryId": "f5195a3f-a222-40da-a75d-ee80cbd3d027"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": [
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "5085f673-5939-4d15-9e5e-527bd3fc7fcd",
            "title": "Slow Pages (pageViews)",
            "visualType": "table",
            "pageId": "5920c0d6-a2d9-473a-9201-f0815ec919b7",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 11,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "cfc168b9-5e57-4738-87f0-8adc55897900"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "f6117963-6368-4373-ae41-b8b8021b9782",
            "title": "Pages at tenants",
            "visualType": "stackedbar",
            "pageId": "5920c0d6-a2d9-473a-9201-f0815ec919b7",
            "layout": {
                "x": 0,
                "y": 20,
                "width": 21,
                "height": 5
            },
            "queryRef": {
                "kind": "query",
                "queryId": "1ed9a521-f614-432d-87db-378f80b5e8d3"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "tenantDescription",
                "yColumns": [
                    "avgDuration"
                ],
                "seriesColumns": [
                    "Page"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "89ae2b0f-345f-4f9f-9aae-e8129b43962a",
            "title": "TenantIds / Descriptions / CompanyNames",
            "visualType": "table",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 5,
                "y": 23,
                "width": 16,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "7313dd17-0115-4a1f-bc38-9b7c4511ab36"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        },
        {
            "id": "e3b4085d-108b-4781-bf26-c83188326b98",
            "title": "Per SourceObject, Per hour",
            "visualType": "stackedcolumn",
            "pageId": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "layout": {
                "x": 0,
                "y": 45,
                "width": 21,
                "height": 16
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4485bd63-2d48-45eb-99cd-7b485f0d1e63"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "e94a42ca-e75d-4ac7-9fae-f1d007763f1e",
            "title": "AvgDuration per tenant per day",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 47,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "b2a9e7a9-3846-4224-b69c-8671c9fc3d4c"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgDuration"
                ],
                "seriesColumns": [
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "1451368b-8d69-4252-8764-3fbcd7f250a0",
            "title": "Compare versions (SQL)",
            "visualType": "pie",
            "pageId": "edd38efc-357f-4074-87bc-ae13ab32e97a",
            "layout": {
                "x": 0,
                "y": 18,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "d00c48f9-d24c-4c89-9950-647d480789a4"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "172fa55c-124a-4d67-b6a3-3232825a1c2a",
            "title": "Slowest Apps (AL)",
            "visualType": "pie",
            "pageId": "edd38efc-357f-4074-87bc-ae13ab32e97a",
            "layout": {
                "x": 12,
                "y": 9,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "2dae8d03-cbe3-482e-80c7-2685f33e07f0"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "716044d9-6476-4c1d-b503-cf75a5ba930a",
            "title": "Usages per ClientType, Per Hour",
            "visualType": "stackedcolumn",
            "pageId": "e0ea770f-baf5-47a6-88b1-1cb0ec5dce59",
            "layout": {
                "x": 0,
                "y": 25,
                "width": 21,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "8481afe5-97d7-4a4e-8dea-f2d9af5aff22"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "db32fb52-1b71-4fcb-b597-e82617f6f1f2",
            "title": "Top 10 Slowest customers (SQL)",
            "visualType": "pie",
            "pageId": "edd38efc-357f-4074-87bc-ae13ab32e97a",
            "layout": {
                "x": 0,
                "y": 0,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "9ba8c656-270f-42fd-a6e7-f1923f02135b"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "b5826009-e4a0-4ef5-a4a4-00ae5559c186",
            "title": "Top 10 Slowest customers (AL)",
            "visualType": "pie",
            "pageId": "edd38efc-357f-4074-87bc-ae13ab32e97a",
            "layout": {
                "x": 12,
                "y": 0,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "6d9c2503-d9a0-46b5-897a-40c028daa655"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "5bde3254-8cfe-4524-87c5-ac62b6b09ee1",
            "title": "Slowest Apps (SQL)",
            "visualType": "pie",
            "pageId": "edd38efc-357f-4074-87bc-ae13ab32e97a",
            "layout": {
                "x": 0,
                "y": 9,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "cf67ae6b-b720-41d9-939e-97db5b01ece8"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "4c0018e9-05dc-4586-b73c-1cd75b52bef1",
            "title": "Compare versions (AL)",
            "visualType": "pie",
            "pageId": "edd38efc-357f-4074-87bc-ae13ab32e97a",
            "layout": {
                "x": 12,
                "y": 18,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ab074c67-7e0f-4709-b9f8-1cca4f970c9c"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": null,
                "yColumns": null,
                "seriesColumns": null,
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "ac3785a3-375c-43df-8bb8-abbcbc0032b3",
            "title": "Test Regression (DurationMs)",
            "visualType": "line",
            "pageId": "fbdd4db5-d977-4a56-997e-4043d8c0645f",
            "layout": {
                "x": 0,
                "y": 14,
                "width": 18,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "271ceb1b-5f57-42a7-b24d-9d12a31751d9"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgDurationMs"
                ],
                "seriesColumns": [
                    "FQMethod"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "25935946-c56c-48d5-9a22-8de383e0b8b1",
            "title": "AvgDuration per message per day",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 55,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "5d5f6cfe-6c35-4725-812e-4688dbed4019"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": 0,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgDuration"
                ],
                "seriesColumns": [
                    "MeasuredFunction"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "bdb27e81-1160-4fee-810a-0ca3e9e368aa",
            "title": "AvgNoOfSQLStatements per Tenant.Message per day",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 12,
                "y": 38,
                "width": 12,
                "height": 9
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4806e077-c6fa-4c5b-843c-faad88acf48f"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": 0,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgNoSqlStatements"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "998465c1-48b9-4d72-a9fb-49ab70868cca",
            "title": "AvgNoOfSQLStatements per tenant per day",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 12,
                "y": 47,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "96589d58-5e35-4bbc-a66f-ee7fb8ea55ae"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": 0,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgNoSqlStatements"
                ],
                "seriesColumns": [
                    "tenantDescription"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "dbcbbe86-b6c1-42f1-a23a-49f1ae325237",
            "title": "AvgNoOfSQLStatements per message per day",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 12,
                "y": 55,
                "width": 12,
                "height": 8
            },
            "queryRef": {
                "kind": "query",
                "queryId": "bdb0d684-097f-4379-ba7c-7a3456528699"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": 0,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgNoSqlStatements"
                ],
                "seriesColumns": [
                    "MeasuredFunction"
                ],
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "a4a111d6-26f8-46ac-8245-f05732ea8c50",
            "title": "AvgDuration per Tenant.Message per hour",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 8,
                "width": 24,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ec8e7a0f-0856-4fa9-ba7f-b42f62a7e46b"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avgDuration"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "ee7f11f8-294c-4eb4-8507-312785142ba5",
            "title": "Count per Tenant per hour",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 18,
                "width": 24,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "ce98ec9f-2df9-4f23-afd7-789d210617cd"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "count_"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "02a24a07-d409-4293-a74b-ca2335882a61",
            "title": "avgDuration per Tenant",
            "visualType": "pie",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 70,
                "width": 12,
                "height": 11
            },
            "queryRef": {
                "kind": "query",
                "queryId": "b4f5a0d6-7873-4918-8508-33936a6844fe"
            },
            "visualOptions": {
                "hideLegend": true,
                "xColumn": "tenantDescription",
                "yColumns": [
                    "avgDuration"
                ],
                "seriesColumns": [
                    "message",
                    "tenantDescription"
                ],
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "labelDisabled": false,
                "pie__label": [
                    "name",
                    "percentage"
                ],
                "tooltipDisabled": false,
                "pie__tooltip": [
                    "name",
                    "percentage",
                    "value"
                ],
                "pie__orderBy": "size",
                "pie__kind": "pie",
                "pie__topNSlices": null,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "9b8c5850-62e0-4350-b1a5-4829a23ba47e",
            "title": "Count per Tenant.Message per hour",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 28,
                "width": 24,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "e1c3198d-7cc9-4e92-8730-b45e133366ca"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "count_"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "5ec40986-bcc1-4f82-9341-13b4f71cc5eb",
            "title": "AvgDuration Item List",
            "visualType": "line",
            "pageId": "5920c0d6-a2d9-473a-9201-f0815ec919b7",
            "layout": {
                "x": 0,
                "y": 10,
                "width": 21,
                "height": 10
            },
            "queryRef": {
                "kind": "query",
                "queryId": "af753aee-0228-4315-9319-da9d1bdae041"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "timestamp",
                "yColumns": [
                    "avg_duration"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "2cf1026b-4ecb-4de8-8f4b-d8d1e04304ba",
            "title": "AvgDuration for (all tenants, all processes)",
            "visualType": "line",
            "pageId": "e057b00e-7fd8-476e-a00c-3421e7656af8",
            "layout": {
                "x": 0,
                "y": 63,
                "width": 24,
                "height": 7
            },
            "queryRef": {
                "kind": "query",
                "queryId": "4b24d44b-2b47-4b2e-a37c-9c5f17848a08"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": 0,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": false,
                "xColumnTitle": "",
                "xColumn": null,
                "yColumns": [
                    "avgDuration"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "b6cca4de-de84-450c-a4b8-ca4c8ae1681b",
            "title": "Deadlocks per BC Version",
            "visualType": "bar",
            "pageId": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
            "layout": {
                "x": 0,
                "y": 36,
                "width": 11,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "882805a9-c54f-45b4-bc64-9432bd0a91b2"
            },
            "visualOptions": {
                "multipleYAxes": {
                    "base": {
                        "id": "-1",
                        "label": "",
                        "columns": [],
                        "yAxisMaximumValue": null,
                        "yAxisMinimumValue": null,
                        "yAxisScale": "linear",
                        "horizontalLines": []
                    },
                    "additional": [],
                    "showMultiplePanels": false
                },
                "hideLegend": true,
                "xColumnTitle": "",
                "xColumn": "componentVersion",
                "yColumns": [
                    "avg_count"
                ],
                "seriesColumns": null,
                "xAxisScale": "linear",
                "verticalLine": "",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": []
            }
        },
        {
            "id": "702b303d-0d66-44cd-9bd2-456324cd2616",
            "title": "Companies",
            "visualType": "table",
            "pageId": "767419b8-bb1b-4f95-9790-6e9f47cae7a1",
            "layout": {
                "x": 11,
                "y": 5,
                "width": 10,
                "height": 12
            },
            "queryRef": {
                "kind": "query",
                "queryId": "747e9125-477b-4043-b484-4786fc800293"
            },
            "visualOptions": {
                "table__enableRenderLinks": true,
                "colorRulesDisabled": true,
                "colorStyle": "light",
                "crossFilterDisabled": false,
                "drillthroughDisabled": false,
                "crossFilter": [],
                "drillthrough": [],
                "table__renderLinks": [],
                "colorRules": []
            }
        }
    ],
    "baseQueries": [
        {
            "id": "862f7073-e362-4e84-86e9-948b06e185ff",
            "queryId": "f2903aad-5c7e-44aa-96ec-38bf1ba218ea",
            "variableName": "allTraces"
        },
        {
            "id": "16f01b77-06b2-437a-9929-e0731f8a6e56",
            "queryId": "4fc30c98-eb38-4636-99b9-a77977aae48f",
            "variableName": "entraTenantIdDescriptions"
        }
    ],
    "parameters": [
        {
            "kind": "duration",
            "id": "39cdef5b-3452-4363-abb8-14af11fec305",
            "displayName": "Time range",
            "description": "",
            "beginVariableName": "_startTime",
            "endVariableName": "_endTime",
            "defaultValue": {
                "kind": "dynamic",
                "count": 1,
                "unit": "hours"
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "5f8ab845-36a0-4ee8-b26e-0a2540d8b928",
            "displayName": "CustomDimensionsContains",
            "variableName": "_customDimensionsContains",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "53f0f6f5-2267-429a-8206-737d975dcce7",
            "displayName": "CompanyFilter",
            "variableName": "_CompanyFilter",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "e0ea770f-baf5-47a6-88b1-1cb0ec5dce59",
                    "767419b8-bb1b-4f95-9790-6e9f47cae7a1"
                ]
            }
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "188fb724-d624-493e-a504-ea84e190c35c",
            "displayName": "MessageFilter",
            "variableName": "_MessageFilter",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "id": "bb15f72d-08d9-44a3-9ff3-1192ffc5c4ea",
            "displayName": "Area",
            "description": "",
            "variableName": "_Area",
            "selectionType": "array",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "all"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "eventArea"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "e2f84e0b-a695-4849-9d35-490a772e8cf2"
                },
                "autoReset": true
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "767419b8-bb1b-4f95-9790-6e9f47cae7a1"
                ]
            }
        },
        {
            "kind": "string",
            "id": "89494460-b823-402b-a4b8-19b08049e258",
            "displayName": "entraTenantId",
            "description": "entraTenantId",
            "variableName": "_entraTenantId",
            "selectionType": "array",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "all"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "entraTenantId"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "015175f5-aebb-4fa7-bc26-c127da6a2e48"
                }
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "id": "acf0dd80-5e90-4694-abd9-f57aee6bf9f3",
            "displayName": "ExtensionName",
            "description": "",
            "variableName": "_extensionName",
            "selectionType": "array",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "all"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "extensionName"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "75608332-b632-4e04-9ec6-34f23199b068"
                }
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "9a07b670-cbc8-46e4-b700-2f8a21677ca8",
            "displayName": "TableFilter",
            "variableName": "_tableFilter",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "9c16317e-23f7-4e29-8a61-dfae292ea6d0"
                ]
            }
        },
        {
            "kind": "string",
            "id": "c74760eb-82d3-4ea6-807f-f87f1462b27e",
            "displayName": "TenantDescription",
            "description": "",
            "variableName": "_TenantDescription",
            "selectionType": "array",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "all"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "tenantDescription"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "26fcd603-d7ce-4ab7-91a4-afe3a1042f02"
                }
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "id": "815cd5e7-2c20-4bdb-9ad5-830d04ef9e4c",
            "displayName": "EnvironmentName",
            "description": "",
            "variableName": "_environmentName",
            "selectionType": "array",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "all"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "environmentName"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "13d3df97-ba8a-4c8b-b5fe-fc54ed6f2bc9"
                },
                "autoReset": true
            },
            "showOnPages": {
                "kind": "all"
            },
            "allIsNull": false
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "9ef8005d-e709-4e8c-887f-8e71a49833e9",
            "displayName": "SourceObjectFilter",
            "variableName": "_sourceObjectFilter",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "142b6efb-d730-4b92-a9f1-c8311c35f795",
                    "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
                    "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
                    "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
                    "5920c0d6-a2d9-473a-9201-f0815ec919b7"
                ]
            }
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "f115ee5f-4c2f-461a-8d90-c880e546aeae",
            "displayName": "SlowObject",
            "variableName": "_SlowObjectFilter",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "142b6efb-d730-4b92-a9f1-c8311c35f795",
                    "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed",
                    "aeb108a6-aa5a-444a-b0d9-5177da37d8b9",
                    "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
                    "5920c0d6-a2d9-473a-9201-f0815ec919b7"
                ]
            }
        },
        {
            "kind": "string",
            "id": "ce8713cf-d172-4bef-95c8-dd3652bfeb88",
            "displayName": "eventId",
            "description": "",
            "variableName": "_eventId",
            "selectionType": "array",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "all"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "eventId",
                    "label": "eventDescription"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "62ba0cc1-d23a-4871-aed7-2687fdee4a33"
                },
                "autoReset": true
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "id": "8c4425c9-bbed-4372-b582-d3f9c9df8335",
            "displayName": "CodeunitName",
            "description": "",
            "variableName": "_codeunitName",
            "selectionType": "scalar",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "query-result"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "CodeunitName"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "038e3570-fa2d-4fb9-8c33-155e9bb50535"
                },
                "autoReset": true
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "c57aad53-d31f-4c8c-a0b7-39424d755d88"
                ]
            }
        },
        {
            "kind": "string",
            "id": "0b33c3c9-d7ea-4adc-ab6f-5fb0acfee1cc",
            "displayName": "Tag",
            "description": "",
            "variableName": "_BCPTTag",
            "selectionType": "array",
            "includeAllOption": true,
            "defaultValue": {
                "kind": "all"
            },
            "dataSource": {
                "kind": "query",
                "columns": {
                    "value": "tag"
                },
                "queryRef": {
                    "kind": "query",
                    "queryId": "3aec6617-0a19-4885-b364-68f9d040c49b"
                }
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "c57aad53-d31f-4c8c-a0b7-39424d755d88"
                ]
            }
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "3624de59-7654-4dc8-a867-6902dc46b7c5",
            "displayName": "componentVersion",
            "variableName": "_componentVersionFilter",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "all"
            }
        },
        {
            "kind": "string",
            "selectionType": "freetext",
            "id": "dacaa9c6-6212-4998-a3d4-06c9f14f0b9e",
            "displayName": "MeasuredFunction",
            "variableName": "_MeasuredFunction",
            "description": "",
            "defaultValue": {
                "kind": "all"
            },
            "showOnPages": {
                "kind": "selection",
                "pageIds": [
                    "e057b00e-7fd8-476e-a00c-3421e7656af8"
                ]
            }
        }
    ],
    "dataSources": [
        {
            "id": "05ae5610-5603-45ac-9458-616539c1c150",
            "name": "AI-CustomerNST",
            "scopeId": "kusto",
            "clusterUri": "https://ade.applicationinsights.io/subscriptions/a8341168-f467-4146-ba71-5e2e523dccb5",
            "database": "AI-CustomerNST",
            "kind": "manual-kusto"
        },
        {
            "id": "d1beef7f-3df5-4cb4-b1bd-dfa9e1c8ee0d",
            "kind": "manual-kusto",
            "scopeId": "kusto",
            "name": "AI-DistriApps",
            "clusterUri": "https://ade.applicationinsights.io/subscriptions/a8341168-f467-4146-ba71-5e2e523dccb5",
            "database": "AI-DistriApps"
        },
        {
            "id": "9b59ad62-82a8-43d2-afbd-0ec79d1e313c",
            "kind": "manual-kusto",
            "scopeId": "kusto",
            "name": "AI-BCPT",
            "clusterUri": "https://ade.applicationinsights.io/subscriptions/a8341168-f467-4146-ba71-5e2e523dccb5",
            "database": "AI-BCPT-NST"
        }
    ],
    "pages": [
        {
            "name": "Base Tables",
            "id": "767419b8-bb1b-4f95-9790-6e9f47cae7a1"
        },
        {
            "name": "Analyze Usages",
            "id": "e0ea770f-baf5-47a6-88b1-1cb0ec5dce59"
        },
        {
            "name": "Performance",
            "id": "edd38efc-357f-4074-87bc-ae13ab32e97a"
        },
        {
            "name": "Perf: Slow SQL",
            "id": "142b6efb-d730-4b92-a9f1-c8311c35f795"
        },
        {
            "id": "2da8380b-5d1b-4b0f-9c49-97c4b310e564",
            "name": "Perf: Slow AL"
        },
        {
            "id": "5920c0d6-a2d9-473a-9201-f0815ec919b7",
            "name": "Perf: Slow Pages"
        },
        {
            "name": "Perf: API",
            "id": "8fb4147d-b1b9-4d4b-b062-6fcb44fd87ed"
        },
        {
            "name": "Perf: Deadlocks",
            "id": "aeb108a6-aa5a-444a-b0d9-5177da37d8b9"
        },
        {
            "name": "Perf: Lock Timeouts",
            "id": "9986d334-d966-4ec6-a436-4e6e6228711d"
        },
        {
            "name": "Perf: ALAnalysis",
            "id": "2546cc61-63e2-4e89-8157-d2977e6ddde6"
        },
        {
            "name": "CT: Custom Events",
            "id": "f56f5822-56bf-4758-a589-1e398df2aeee"
        },
        {
            "name": "CT: Tests",
            "id": "fbdd4db5-d977-4a56-997e-4043d8c0645f"
        },
        {
            "name": "CT: Performance",
            "id": "e057b00e-7fd8-476e-a00c-3421e7656af8"
        },
        {
            "name": "CT: Daily Statistics",
            "id": "9c16317e-23f7-4e29-8a61-dfae292ea6d0"
        },
        {
            "name": "BCPT",
            "id": "c57aad53-d31f-4c8c-a0b7-39424d755d88"
        }
    ],
    "queries": [
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty(customDimensions.environmentType)\n| where isnotempty(customDimensions.companyName)\n| extend companyName = tostring(customDimensions.companyName)\n| extend environmentName = tostring(customDimensions.environmentName)\n| extend IsSaas  = iff(isempty(environmentName) or environmentName in ('common','null','default','undefined'),false,true)\n| extend environmentType = iff(tobool(IsSaas),tostring(customDimensions.environmentType), \n                                iff(isempty(environmentName) or environmentName in ('common','null','default','undefined'),'OnPrem','SaaS'))\n| where environmentType == 'Production'\n    or (environmentName !contains 'TEST'\n    and environmentName !contains 'QA'\n    and environmentName !contains 'TRAINING')\n| summarize count() by aadTenantId, tenantDescription, companyName, environmentName, environmentType, IsSaas\n| order by IsSaas",
            "id": "ad53463a-5499-4cae-b20b-fe9317c44d40",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "traces\n| where timestamp between (_startTime .. _endTime) // Parameter usage\n| where message contains _MessageFilter            // Parameter usage\n| where isnotempty(customDimensions.eventId)\n| extend eventId = tostring(customDimensions.eventId)\n| extend shortMessage = iif(substring(message, 0, 4) == \"Task\", \"Task Executed\",  //String manipulation \n                    iif(eventId == \"AL0000JRG\", \"Job Queue Error\",\n                        iff(indexof(message, \":\") <= 0, message, substring(message, 0, indexof(message, \":\")))))\n| extend status = //String manipulation \n    iif(shortMessage has_any (\"called\",\"executed\",\"succeeded\",\"rendered\",\"successfully\",\"success\",\"opened\", \"added\", \"started\", \"finished\", \"Used\",\"enqueued\"),\"success\",\n        iif(shortMessage has_any (\"error\",\"fail\",\"failed\",\"deadlock\",\"timed out\"), \"error\",\n            iif(shortMessage has_any (\"exceeded\"),'too slow',\n                \"unknown\")))\n| summarize count = count() by tostring(eventId), tostring(shortMessage), status\n| order by ['count'] desc\n",
            "id": "d72a9b03-a526-4583-a343-c046eb1ba9c7",
            "usedVariables": [
                "_MessageFilter",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| extend shortMessage = iif(substring(message, 0, 4) == \"Task\", \"Task Executed\",  //Remove ID's from message\n                    iif(eventId == \"AL0000JRG\", \"Job Queue Error\",\n                        iff(indexof(message, \":\") <= 0, message, substring(message, 0, indexof(message, \":\")))))\n| extend status = //Come up with a status\n    iif(shortMessage has_any (\"called\",\"executed\",\"succeeded\",\"rendered\",\"successfully\",\"success\",\"opened\", \"added\", \"started\", \"finished\"),\"success\",\n        iif(shortMessage has_any (\"error\",\"fail\",\"failed\",\"deadlock\",\"timed out\"), \"error\",\n            iif(shortMessage has_any (\"exceeded\"),'too slow',\n                \"unknown\")))\n| summarize count = count() by tostring(eventId), tostring(shortMessage), status\n| extend LearnUrl = strcat(\"https://learn.microsoft.com/en-us/search/?scope=BusinessCentral&terms=\",eventId, \"+\", replace_string(shortMessage,\" \",\"+\"))\n| project eventId, shortMessage, status, count, LearnUrl\n| order by ['count'] desc\n",
            "id": "849828c7-18b5-4b94-90c7-56fa77bca74d",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventArea has_any (_Area)     //drop-down list of all Areas\n| summarize count = count() by eventArea\n| order by ['count'] desc",
            "id": "acaf0b25-2ab3-493d-b555-3a9d821a4ab6",
            "usedVariables": [
                "_Area",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Custom Events in the base app\ntraces\n| where timestamp between (_startTime .. _endTime) \n| where customDimensions.eventId startswith \"AL\"    //all events raised in AL, start with \"AL\"\n| where customDimensions.extensionPublisher == 'Microsoft'\n| extend eventId = tostring(customDimensions.eventId)\n| extend shortMessage = iif(substring(message, 0, 4) == \"Task\", \"Task Executed\", \n                    iif(customDimensions.eventId == \"AL0000JRG\", \"Job Queue Error\",\n                        iff(indexof(message, \":\") <= 0, message, substring(message, 0, indexof(message, \":\")))))\n| where shortMessage contains _MessageFilter\n| summarize count() by eventId, shortMessage\n| order by count_ desc",
            "id": "1068d9b9-0ac0-452a-a862-ddab07f4ebd3",
            "usedVariables": [
                "_MessageFilter",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "d1beef7f-3df5-4cb4-b1bd-dfa9e1c8ee0d"
            },
            "text": "//Custom Events in everything but Microsoft\ntraces\n| where timestamp between (_startTime .. _endTime) \n| where customDimensions.eventId startswith \"AL\"\n| where customDimensions.extensionPublisher <> 'Microsoft'\n| extend eventId = tostring(customDimensions.eventId)\n| extend submsg = iif(substring(message, 0, 4) == \"Task\", \"Task Executed\", \n                    iif(customDimensions.eventId == \"AL0000JRG\", \"Job Queue Error\",\n                        iff(indexof(message, \":\") <= 0, message, substring(message, 0, indexof(message, \":\")))))\n| where submsg contains _MessageFilter\n| extend extensionPublisher = tostring(customDimensions.extensionPublisher)\n| summarize count() by extensionPublisher, eventId, submsg\n| order by count_ desc",
            "id": "fef7722c-9493-4354-be87-f82b023e84d3",
            "usedVariables": [
                "_MessageFilter",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "d1beef7f-3df5-4cb4-b1bd-dfa9e1c8ee0d"
            },
            "text": "//Get CodeunitNames\nlet codeunitNames = \n    traces\n    | where timestamp between (_startTime .. _endTime)\n    | where customDimensions has 'ALIFCTST0002' //Full Codeunit Run\n    | extend codeunitName = tostring(customDimensions.alName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n    | summarize by codeunitId, codeunitName;\n//TelemetryOnTests - Overview\nlet Tests = \n    traces\n    | where timestamp between (_startTime .. _endTime)\n    | where tostring(customDimensions.eventId) in (\"ALIFCTST0001\", \"ALIFCTST0002\", \"ALIFCTST0003\")\n    | extend\n        timestamp = timestamp\n        , eventId = customDimensions.eventId\n        , TestSuiteName = tostring(customDimensions.alTestSuiteName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n        , MethodName = tostring(customDimensions.alMethodName)\n        , StartTime = tostring(customDimensions.alStartTime)\n        , EndTime = tostring(customDimensions.alEndTime)\n        , NoOfReads = tostring(customDimensions.alNoOfReads)\n        , NoOfSqlStatements = tostring(customDimensions.alNoOfSQLStatements)\n        , DurationMs = tostring(customDimensions.alDurationMs)\n        , Result = tostring(customDimensions.alResult)\n    | order by timestamp desc\n    | take 10000;\ncodeunitNames\n| join kind = rightouter Tests on $left.codeunitId == $right.codeunitId\n| project\n        timestamp,\n        eventId,\n        TestSuiteName,\n        codeunitId,\n        codeunitName,\n        MethodName,\n        StartTime,\n        EndTime,\n        Result,\n        NoOfReads,\n        NoOfSqlStatements,\n        DurationMs",
            "id": "8eb99ab2-0a8c-467d-99a1-b9e8d8a81805",
            "usedVariables": [
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "d1beef7f-3df5-4cb4-b1bd-dfa9e1c8ee0d"
            },
            "text": "//Get CodeunitNames\nlet codeunitNames = \n    traces\n    | where timestamp between (_startTime .. _endTime)\n    | where customDimensions has 'ALIFCTST0002' //Full Codeunit Run\n    | extend codeunitName = tostring(customDimensions.alName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n    | summarize by codeunitId, codeunitName;\n//Take first 2 days of the period\nlet BeginningOfPeriod = \n    traces\n    | where timestamp between (_startTime .. _startTime + 2d)\n    | where tostring(customDimensions.eventId) == \"ALIFCTST0003\" //One function (method)\n    | extend CodeunitName = tostring(customDimensions.alName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n        , MethodName = tostring(customDimensions.alMethodName)\n        , NoOfSqlStatements = toint(customDimensions.alNoOfSQLStatements)\n    | join kind = leftouter codeunitNames on $left.codeunitId == $right.codeunitId\n    | extend FQMethod = strcat(codeunitName,'.',MethodName)\n    | where FQMethod contains _MessageFilter or message  contains _MessageFilter\n    | summarize avgNoOfSqlStatements=avg(NoOfSqlStatements) by FQMethod;\n//Then take last 2 days of the period\nlet EndOfPeriod = \n    traces\n    | where timestamp between (_endTime - 2d .. _endTime)\n    | where tostring(customDimensions.eventId) == \"ALIFCTST0003\"\n    | extend CodeunitName = tostring(customDimensions.alName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n        , MethodName = tostring(customDimensions.alMethodName)\n        , NoOfSqlStatements = toint(customDimensions.alNoOfSQLStatements)\n    | join kind = leftouter codeunitNames on $left.codeunitId == $right.codeunitId\n    | extend FQMethod = strcat(codeunitName,'.',MethodName)\n    | where FQMethod contains _MessageFilter or message  contains _MessageFilter\n    | summarize avgNoOfSqlStatements=avg(NoOfSqlStatements) by FQMethod;\n//calculate difference, and take top 10 of the methods\nlet Difference = \n    BeginningOfPeriod\n    | join kind=leftouter EndOfPeriod on $left.FQMethod == $right.FQMethod\n    | extend Difference =  avgNoOfSqlStatements1 - avgNoOfSqlStatements\n    | order by Difference desc\n    | take 10;\n//Result, getting methods only\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where tostring(customDimensions.eventId) == \"ALIFCTST0003\"\n| extend\n    codeunitId = tostring(customDimensions.alCodeunitId)\n    , MethodName = tostring(customDimensions.alMethodName)\n    , NoOfSqlStatements = toint(customDimensions.alNoOfSQLStatements)\n| join kind = leftouter codeunitNames on $left.codeunitId == $right.codeunitId\n| extend FQMethod = strcat(codeunitName,'.',MethodName)\n| join kind=rightouter Difference on $left.FQMethod == $right.FQMethod\n| project timestamp, FQMethod, NoOfSqlStatements\n| summarize avgNoOfSqlStatements=avg(NoOfSqlStatements) by bin(timestamp, 1d), FQMethod\n| order by FQMethod",
            "id": "5f38a55b-af52-4ef8-aef5-7f7406256562",
            "usedVariables": [
                "_MessageFilter",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = message\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| project timestamp, tenantDescription, environmentName, MeasuredFunction, TenantMeasuredFunction, Duration, NoSqlStatements, customDimensions\n| order by timestamp desc\n| take 100",
            "id": "1d71e967-825a-4778-8dfe-56ebe5db8c76",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = message\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| project timestamp, tenantDescription, environmentName, MeasuredFunction, Duration, NoSqlStatements, componentVersion, callerAppVersion, callerAppName, callerPublisher\n| summarize count(), avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoSqlStatements)) by MeasuredFunction, tenantDescription, environmentName, componentVersion, callerAppVersion, callerAppName, callerPublisher\n| project MeasuredFunction, tenantDescription, environmentName, count_, avgDuration, avgNoSqlStatements, callerAppName, callerPublisher, callerAppVersion, componentVersion",
            "id": "0286c045-54a3-410f-94f8-cc88865fa119",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize count(), avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by TenantMeasuredFunction, bin(timestamp, 1d)",
            "id": "79a46816-c798-4ef1-817b-c91e061fad27",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "d1beef7f-3df5-4cb4-b1bd-dfa9e1c8ee0d"
            },
            "text": "Base_Distri\n| where eventId == \"ALIFCTLM0001\"\n| where not (customDimensions has_any (\"[Image]\", \"[Picture]\")) //No indexes with columns for pictures/blobs\n| extend TableName = tostring(customDimensions.alTableName)\n    , EqualityColumns = tostring(customDimensions.alEqualityColumns)\n    , InequalityColumns = tostring(customDimensions.alInequalityColumns)\n    , IncludeColumns = tostring(customDimensions.alIncludeColumns)\n| where TableName contains _tableFilter\n| project timestamp, tenantDescription, TableName,EqualityColumns,InequalityColumns,IncludeColumns\n| order by timestamp desc\n| take 1000\n",
            "id": "bae4024a-0ed8-4a66-8518-b9d366b5e60d",
            "usedVariables": [
                "Base_Distri",
                "_tableFilter"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Missing indexes Per Index\nallTraces\n| where customDimensions.eventId == \"ALIFCTLM0001\"\n| where not (customDimensions has_any (\"[Image]\", \"[Picture]\",\"[Data]\")) //No indexes with columns for pictures/blobs\n| extend TableName = tostring(customDimensions.alTableName)\n    , EqualityColumns = tostring(customDimensions.alEqualityColumns)\n    , InequalityColumns = tostring(customDimensions.alInequalityColumns)\n    , IncludeColumns = tostring(customDimensions.alIncludeColumns)\n| where TableName contains _tableFilter\n| summarize by bin(timestamp, 1d), aadTenantId, TableName,EqualityColumns,InequalityColumns,IncludeColumns\n| summarize count_ = count() by TableName,EqualityColumns,InequalityColumns,IncludeColumns\n| order by count_ desc \n| project count_,  TableName,EqualityColumns,InequalityColumns,IncludeColumns",
            "id": "b8d49c39-2ca0-44e6-9701-6efbd39fcbf1",
            "usedVariables": [
                "_tableFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where timestamp between (_endTime - 1d .. _endTime)\n| where not (customDimensions has_any (\"[Image]\", \"[Picture]\",\"[Data]\")) //No indexes with columns for pictures/blobs\n| where customDimensions contains \"ALIFCTLM0001\"\n| extend TableName = tostring(customDimensions.alTableName)\n    , EqualityColumns = tostring(customDimensions.alEqualityColumns)\n    , InequalityColumns = tostring(customDimensions.alInequalityColumns)\n    , IncludeColumns = tostring(customDimensions.alIncludeColumns)\n| summarize by tenantDescription, TableName,EqualityColumns,InequalityColumns,IncludeColumns\n| summarize count_ = count() by tenantDescription\n| order by count_ desc \n",
            "id": "91318bec-fc4f-4ede-977f-8081bc9b94cb",
            "usedVariables": [
                "_endTime",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Missing indexes over time\nallTraces\n| where customDimensions.eventId == \"ALIFCTLM0001\"\n| where not (customDimensions has_any (\"[Image]\", \"[Picture]\",\"[Data]\")) //No indexes with columns for pictures/blobs\n| extend TableName = tostring(customDimensions.alTableName)\n    , EqualityColumns = tostring(customDimensions.alEqualityColumns)\n    , InequalityColumns = tostring(customDimensions.alInequalityColumns)\n    , IncludeColumns = tostring(customDimensions.alIncludeColumns)\n| summarize by bin(timestamp, 1d), tenantDescription, TableName,EqualityColumns,InequalityColumns,IncludeColumns //group all per day/tenant\n| summarize count_ = count() by bin(timestamp, 1d), tenantDescription                                            //count all per day/tenant\n| order by count_ desc ",
            "id": "ab4a2a55-7797-41f6-a345-b36035555e41",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Orphans\n\nallTraces\n| where tostring(customDimensions.eventId) in (\"ALIFCTLM0003\", \"ALIFCTLM0004\", \"ALIFCTLM0005\", \"ALIFCTLM0006\")\n| extend aadTenantId = tostring(customDimensions.aadTenantId)\n| project timestamp, tenantDescription, companyName, message\n| order by timestamp desc\n",
            "id": "8d67f15b-e4d6-40ad-aaa9-16576cbd1a08",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Orphans Problems!\n\nallTraces\n| where tostring(customDimensions.eventId) in (\"ALIFCTLM0003\", \"ALIFCTLM0005\")\n| extend NoOfOrphans = toint(customDimensions.alNoOfOrphans)\n| project timestamp, tenantDescription, message, NoOfOrphans\n| summarize NoOfOrphans = toint(avg(NoOfOrphans)) by bin(timestamp, 1d), tenantDescription, message\n| order by timestamp desc\n",
            "id": "99267696-d8d5-47a4-81d2-ad6a9213ba61",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Orphans Problems!\n\nallTraces\n| where timestamp between (_endTime - 1d .. _endTime)\n| where tostring(customDimensions.eventId) in (\"ALIFCTLM0003\", \"ALIFCTLM0005\")\n| extend NoOfOrphans = toint(customDimensions.alNoOfOrphans)\n| project timestamp, tenantDescription, message, NoOfOrphans\n| summarize NoOfOrphans = toint(avg(NoOfOrphans)) by bin(timestamp, 1d), tenantDescription , message\n| order by timestamp desc\n",
            "id": "dd5bda32-e0ba-4bc5-b7b2-9579b7921ec6",
            "usedVariables": [
                "_endTime",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Many Joins - base query\nallTraces\n| where isnotempty(customDimensions.sqlStatement)  // I need to analyze SQL Statement\n| where isnotempty(customDimensions.alStackTrace)  // Actionable\n| where customDimensions.extensionPublisher <> 'Microsoft'\n| extend numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") //numberOfJoins\n| where not(customDimensions.alObjectType in (\"Page\")) \n| where customDimensions.sqlStatement startswith \"SELECT\" \n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1 //NumberOfColumns\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionName = customDimensions.extensionName\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = customDimensions.componentVersion\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project aadTenantId, tenantDescription, companyName, componentVersion, extensionPublisher, extensionName, numberOfColumnsSelected, numberOfJoins, executionTimeInMS, ObjectType, ObjectId, ObjectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| order by numberOfColumnsSelected, numberOfJoins desc\n| take 1000\n",
            "id": "62457db5-a6a8-4ec6-88f9-a01f98c49903",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Many Joins - By Table\nallTraces\n| where isnotempty(customDimensions.sqlStatement)\n| where isnotempty(customDimensions.alStackTrace)\n| extend numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n| where not(customDimensions.alObjectType in (\"Page\"))\n| where customDimensions.sqlStatement startswith \"SELECT\"\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    // , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = tostring(customDimensions.componentVersion)\n| where numberOfColumnsSelected > 20\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n// | project TenantId, extensionPublisher, extensionName, companyName, numberOfColumnsSelected, numberOfJoins, executionTimeInMS, ObjectType, ObjectId, ObjectName, clientType, StackTrace, eventId, message, tablename, sqlStatement, extensionIdsFromJOIN, componentVersion\n| summarize avgExecutionTime = toint(avg(executionTimeInMS)), avgnumberOfColumns = toint(avg(numberOfColumnsSelected)), count = count() by aadTenantId, tenantDescription, componentVersion, extensionName\n| order by avgnumberOfColumns desc \n\n",
            "id": "b78b3b13-0972-4df3-8925-0931689e2e89",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Many Joins - By Table\nallTraces\n| where isnotempty(customDimensions.sqlStatement)\n| where isnotempty(customDimensions.alStackTrace)\n| extend numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n| where not(customDimensions.alObjectType in (\"Page\"))\n| where customDimensions.sqlStatement startswith \"SELECT\"\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , TenantId = strcat(customDimensions.aadTenantId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project TenantId, extensionPublisher, extensionName, companyName, numberOfColumnsSelected, numberOfJoins, executionTimeInMS, ObjectType, ObjectId, ObjectName, clientType, StackTrace, eventId, message, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize avgExecutionTime = toint(avg(executionTimeInMS)), avgnumberOfColumns = toint(avg(numberOfColumnsSelected)), count = count() by tablename\n| order by ['count'] desc \n| take 1000\n",
            "id": "98dfa888-edb5-47cc-ba0e-8e880596e434",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // Actionable\n| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT TOP 1 NULL\" //IsEmpty\n    and customDimensions.sqlStatement contains \"UPDLOCK\"           //Which is locking\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = tostring(customDimensions.componentVersion)\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project aadTenantId, companyName, componentVersion, extensionPublisher, extensionName\n    , executionTimeInMS, ObjectType, ObjectId, ObjectName, StackTrace, eventId, message, clientType, tablename, sqlStatement,customDimensions\n| take 1000\n",
            "id": "28e70b6f-3eb2-4c0b-bb30-c973d39ab1c1",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": " // Any IsEmpty that we can find in Telemetry that is locking\n // By ExtensionName\n\nallTraces\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // Actionable\n| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT TOP 1 NULL\"\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = tostring(customDimensions.componentVersion)\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n// | project TenantId, extensionPublisher, extensionName, companyName, numberOfColumnsSelected, executionTimeInMS, ObjectType, ObjectId, ObjectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize count = count() by tenantDescription,  tostring(extensionName), componentVersion\n| order by count desc \n",
            "id": "b61f7297-4a16-4c8c-9043-b1b11ea25a5b",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace)           // Actionable\n| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT SUM\" //Calcsums\n    and customDimensions.sqlStatement contains \"UPDLOCK\"    //Which is locking\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = tostring(customDimensions.componentVersion)\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project aadTenantId, companyName, componentVersion, extensionName, executionTimeInMS, ObjectType, ObjectId, ObjectName, StackTrace, eventId, message, clientType, tablename, sqlStatement,  customDimensions\n| take 1000\n",
            "id": "a9f12f5d-984e-4e18-8393-e8bb8ba6f9d1",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": " // Any IsEmpty that we can find in Telemetry that is locking\n // By ExtensionName\n\nallTraces\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // Actionable\n| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT SUM\"\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = tostring(customDimensions.componentVersion)\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n// | project TenantId, extensionPublisher, extensionName, companyName, numberOfColumnsSelected, executionTimeInMS, ObjectType, ObjectId, ObjectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize count = count() by tenantDescription,  tostring(extensionName), componentVersion\n| order by count desc \n",
            "id": "c506d87f-df7a-48ab-bb83-77df77cf10e8",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // Actionable\n| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT COUNT\"  //.Count\n    and customDimensions.sqlStatement contains \"UPDLOCK\"       //Which is locking\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = tostring(customDimensions.componentVersion)\n| extend extensionIdsFromJOIN = tostring( extract_all(\"JOIN \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY\\\\$.+?\\\\$(\\\\S+?)\\\"\", sqlStatement))\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n| project aadTenantId, componentVersion, extensionName, executionTimeInMS, ObjectType, ObjectId, ObjectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN, customDimensions\n| take 1000\n",
            "id": "937ccec9-23d8-4dcb-8703-ef0040650193",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": " // Any IsEmpty that we can find in Telemetry that is locking\n // By ExtensionName\n\nallTraces\n| where isnotempty(customDimensions.sqlStatement) \n| where isnotempty(customDimensions.alStackTrace) // Actionable\n| where customDimensions.extensionPublisher <> \"Microsoft\"\n| where customDimensions.sqlStatement contains \"SELECT COUNT\"\n    and customDimensions.sqlStatement contains \"UPDLOCK\"\n    and customDimensions.sqlStatement startswith \"SELECT\"\n| where not(customDimensions.alObjectType in (\"Page\"))\n| parse kind=regex tostring(customDimensions.sqlStatement) with selectPart: string \"FROM\" rest: string\n| extend numberOfColumnsSelected = countof(selectPart, \",\") + 1\n    , eventId = tostring(customDimensions.eventId)\n    , userId = user_Id\n    , ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)\n    , clientType = tostring(customDimensions.clientType)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , executionTime = customDimensions.executionTime\n    , executionTimeInMS = toreal(totimespan(customDimensions.executionTime))/10000\n    , extensionId = customDimensions.extensionId\n    , extensionPublisher = customDimensions.extensionPublisher\n    , componentVersion = tostring(customDimensions.componentVersion)\n| extend tablename = tostring( extract_all(\"FROM \\\"SQLDATABASE\\\"\\\\.dbo\\\\.\\\"CURRENTCOMPANY(\\\\$.+?)\\\\$\\\\S+?\\\"\", sqlStatement)[0])\n// | project TenantId, extensionPublisher, extensionName, companyName, numberOfColumnsSelected, executionTimeInMS, ObjectType, ObjectId, ObjectName, StackTrace, eventId, message, clientType, tablename, sqlStatement, extensionIdsFromJOIN\n| summarize count = count() by tenantDescription,  tostring(extensionName), componentVersion\n| order by count desc \n",
            "id": "106149f3-1147-4c15-bae0-5174e379ddd4",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - Last ones\r\nallTraces\r\n| where eventId == 'RT0028'\r\n| where customDimensions.alObjectId != '0' //Actionable\r\n| where isnotempty(customDimensions.alObjectId)\r\n| extend ObjectType = tostring(customDimensions.alObjectType)\r\n    , ObjectId = tostring(customDimensions.alObjectId)\r\n    , ObjectName = tostring(customDimensions.alObjectName)\r\n    , sqlStatement = tostring(customDimensions.sqlStatement)\r\n    // , companyName = tostring(customDimensions.companyName)        \r\n    , userId = user_Id\r\n| extend operationType = case(\r\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\r\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\r\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\r\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\r\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\r\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\r\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\r\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\r\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\r\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\r\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\r\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \r\n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\r\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\r\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\r\n    , \"UNKNOWN\"\r\n    ) \r\n//Get tablename with regex\r\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\r\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\r\n| extend lengthStacktrace = array_length(splitStacktrace)\r\n| extend\r\n    LockingObject = splitStacktrace[0],\r\n    SourceProcess = splitStacktrace[lengthStacktrace - 1]\r\n| where SourceProcess contains _sourceObjectFilter\r\n| where LockingObject contains _SlowObjectFilter\r\n| project\r\n    timestamp,\r\n    tenantDescription,\r\n    // companyName,\r\n    userId,\r\n    ObjectType,\r\n    ObjectId,\r\n    ObjectName,\r\n    LockingObject,\r\n    SourceProcess,\r\n    operationType,\r\n    sqlStatement,\r\n    splitStacktrace,\r\n    customDimensions\r\n| order by timestamp desc \r\n",
            "id": "3f746118-38e0-484b-b725-89d738a38f15",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - By Customer\n\nallTraces\n| where eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , componentVersion = tostring(customDimensions.componentVersion)\n    , userId = user_Id\n| where ObjectName contains _sourceObjectFilter\n| parse kind=regex sqlStatement with selectPart: string \"FROM \" tablename: string\n| project timestamp, tenantDescription, companyName, componentVersion, ObjectType, ObjectId, ObjectName, numberOfJoins, stackTrace, sqlStatement, tablename, customDimensions\n| summarize count = count() by tenantDescription, componentVersion, companyName\n| project count, tenantDescription, companyName, componentVersion\n| order by count desc \n\n",
            "id": "151f25fc-9e44-4289-8a43-1185d398bf26",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - By Day\n\nallTraces\n| where customDimensions has 'RT0028'\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| where ObjectName contains _sourceObjectFilter\n| parse kind=regex sqlStatement with selectPart: string \"FROM \" tablename: string\n| project timestamp, tenantDescription, ObjectType, ObjectId, ObjectName, numberOfJoins, stackTrace, sqlStatement, tablename, customDimensions\n| summarize count = count() by bin(timestamp, 1h), tenantDescription\n",
            "id": "ba26a4f4-d6bf-4c9d-9290-51f9c25ace3f",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - by Source Process\n\nallTraces\n| where customDimensions.eventId == 'RT0028'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , componentVersion = tostring(customDimensions.componentVersion)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where SourceProcess contains _sourceObjectFilter\n| where LockingObject contains _SlowObjectFilter\n| project\n    timestamp,\n    aadTenantId,\n    tenantDescription,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,\n    topOfStackPublisher,\n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    componentVersion,\n    sqlStatement\n| extend ExtensionName = iif(LockingObjectExtension contains \"iFacto\" \n        or LockingObjectExtension contains \"Single\"\n        or LockingObjectExtension contains \"Distri\"\n        or LockingObjectExtension contains \"Commerce\"\n        or topOfStackPublisher contains \"Microsoft\"\n            , LockingObjectExtension, 'PTE')\n| summarize count = count() by componentVersion, tostring(SourceProcess), tostring(tenantDescription), tostring(ExtensionName), tostring(LockingObject), tostring(LockingObjectId), tostring(LockingObjectMethod),tostring(operationType)\n| project count, tenantDescription, componentVersion, SourceProcess, LockingObject, operationType, ExtensionName\n| order by ['count'],SourceProcess desc \n\n\n",
            "id": "9eaa84a1-7aab-4383-9c5e-96f42c1815a5",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - by Source Process\n\nallTraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where SourceProcess contains _sourceObjectFilter\n| where LockingObject contains _SlowObjectFilter\n| project\n    timestamp,\n    aadTenantId,\n    companyName,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,    \n    SourceProcess,\n    StackTrace,\n    customDimensions\n| summarize count = count() by tostring(LockingObject)\n| order by ['count'],LockingObject desc \n\n\n",
            "id": "d3c4f6ca-b07d-4112-9668-3a32082658a5",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - by Source Process\n\nallTraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where SourceProcess contains _sourceObjectFilter\n| where LockingObject contains _SlowObjectFilter\n| project\n    timestamp,\n    aadTenantId,\n    tenantDescription,\n    companyName,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,    \n    SourceProcess,\n    StackTrace,\n    customDimensions\n| summarize count = count() by tostring(SourceProcess)\n| order by ['count'],SourceProcess desc \n\n\n",
            "id": "d3ae8ab3-c9fe-4bdc-b912-3bbdc17a0b1f",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// Lock Timeouts - Last ones\r\nallTraces\r\n| where eventId == 'RT0012'\r\n| where customDimensions.alObjectId != '0' \r\n| where isnotempty(customDimensions.alObjectId)\r\n| extend ObjectType = tostring(customDimensions.alObjectType)\r\n    , ObjectId = tostring(customDimensions.alObjectId)\r\n    , ObjectName = tostring(customDimensions.alObjectName)\r\n    , sqlStatement = tostring(customDimensions.sqlStatement)\r\n    // , companyName = tostring(customDimensions.companyName)        \r\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \r\n    , userId = user_Id\r\n| extend operationType = case(\r\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\r\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\r\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\r\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\r\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\r\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\r\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\r\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\r\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\r\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\r\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\r\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \r\n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\r\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\r\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\r\n    , \"UNKNOWN\"\r\n    ) \r\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\r\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\r\n| extend lengthStacktrace = array_length(splitStacktrace)\r\n| extend\r\n    LockingObject = splitStacktrace[0],\r\n    SourceProcess = splitStacktrace[lengthStacktrace - 1]\r\n| where SourceProcess contains _sourceObjectFilter\r\n| where LockingObject contains _SlowObjectFilter\r\n| project\r\n    timestamp,\r\n    tenantDescription,\r\n    userId,\r\n    // companyName,\r\n    ObjectType,\r\n    ObjectId,\r\n    ObjectName,\r\n    numberOfJoins,\r\n    LockingObject,\r\n    SourceProcess,\r\n    operationType,\r\n    sqlStatement,\r\n    splitStacktrace,\r\n    customDimensions\r\n| order by timestamp desc \r\n\r\n",
            "id": "d7ec2d0a-3172-47bd-92de-2ecd84120987",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0012'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\") \n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , componentVersion = tostring(customDimensions.componentVersion)\n    , userId = user_Id\n| parse kind=regex sqlStatement with selectPart: string \"FROM \" tablename: string\n    | extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n    | extend lengthStacktrace = array_length(splitStacktrace)\n    | extend\n        LockingObject = splitStacktrace[0],\n        SourceProcess = splitStacktrace[lengthStacktrace - 1]\n| where SourceProcess contains _sourceObjectFilter\n| where LockingObject contains _SlowObjectFilter\n| project timestamp, tenantDescription, componentVersion, ObjectType, ObjectId, ObjectName, numberOfJoins, stackTrace, sqlStatement, tablename, customDimensions\n| summarize count = count() by tenantDescription, componentVersion\n| project count, tenantDescription, componentVersion\n| order by count desc \n\n",
            "id": "0e173c7f-e33e-40ec-bde6-f2815ab2252c",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// Lock Timeouts - By Day\n\nallTraces\n| where eventId == 'RT0012'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n//     , companyName = tostring(customDimensions.companyName)        \n    , stackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| where ObjectName contains _sourceObjectFilter\n| parse kind=regex sqlStatement with selectPart: string \"FROM \" tablename: string\n| summarize count = count() by bin(timestamp, 1h), tenantDescription, ObjectName\n",
            "id": "e9f675cb-29b6-4424-a1e2-3a5067c07d33",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// Lock Timeouts - by Source Process\n\nallTraces\n| where customDimensions.eventId == 'RT0012'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where SourceProcess contains _sourceObjectFilter\n| where LockingObject contains _SlowObjectFilter\n| project\n    timestamp,\n    aadTenantId,\n    companyName,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,    \n    SourceProcess,\n    StackTrace,\n    customDimensions\n| summarize count = count() by tostring(SourceProcess)\n| order by ['count'],SourceProcess desc \n\n\n",
            "id": "c0d91ac3-7acd-45cf-aef3-2e7df92ee41c",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - by Source Process\n\nallTraces\n| where customDimensions.eventId == 'RT0012'\n| where isnotempty(customDimensions.aadTenantId) // filter away signal from Docker sandboxes\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where SourceProcess contains _sourceObjectFilter\n| where LockingObject contains _SlowObjectFilter\n| project\n    timestamp,\n    aadTenantId,\n    companyName,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,    \n    SourceProcess,\n    StackTrace,\n    customDimensions\n| summarize count = count() by tostring(LockingObject)\n| order by ['count'],LockingObject desc \n\n\n",
            "id": "ceec8299-6e70-4823-9056-700f22863dd3",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'\n| extend endpoint = tostring(customDimensions.endpoint)\n    , eventId = tostring(customDimensions.eventId)\n| summarize count(), avgTime = toint(avg(elapsedTimeInMS)), totalTime = toint(sum(elapsedTimeInMS)) by tenantDescription, companyName\n| order by totalTime desc \n",
            "id": "fefc7f6f-ce05-4b7f-ab75-dec8ce4d9117",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'\n| extend totalTime = toint(totimespan(customDimensions.totalTime)/10000)\n    , endpoint = tostring(customDimensions.endpoint)\n    , eventId = tostring(customDimensions.eventId)\n| summarize count(), avgTime = toint(avg(totalTime)), totalTime = sum(totalTime) by bin(timestamp,1d), tenantDescription\n| take 10",
            "id": "541bf1fb-16f1-4cdd-8e4a-547f51a133d3",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "traces //we don't want to have the default filters, therefore NO base query\n| where timestamp between (_endTime - 30d .. _endTime)\n| extend eventId = tostring(customDimensions.eventId)\n    , aadTenantId = tostring(customDimensions.aadTenantId)\n    , extensionName = tostring(customDimensions.extensionName)\n| where eventId has_any (_eventId)\n| join kind=leftouter entraTenantIdDescriptions on $left.aadTenantId == $right.entraTenantId\n| where tenantDescription has_any (_TenantDescription)\n| summarize count() by bin(timestamp,1d)\n",
            "id": "04b7d54d-6bf2-4952-96dd-d3d3f42b51a6",
            "usedVariables": [
                "_TenantDescription",
                "_endTime",
                "_eventId"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'   //Incoming webservice Calls\n| extend endpoint = tostring(customDimensions.endpoint) \n    , ObjectName = tostring(customDimensions.alObjectName)\n    , serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n    , totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n    , queryFilter = tostring(customDimensions.queryFilter)\n| where ObjectName contains _sourceObjectFilter\n| summarize count = count(), avgServerExecutionTimeInMS = avg(serverExecutionTimeInMS), avgTotalTimeInMs = avg(totalTimeInMS) by endpoint, queryFilter, ObjectName\n| project \n    endpoint\n    , queryFilter\n    , ObjectName\n    , ['count']\n    , avgServerExecutionTimeInMS = round(avgServerExecutionTimeInMS,0)\n    , avgTotalTimeInMs = round(avgTotalTimeInMs, 0)\n    , ApproxTime = round(['count'] * avgServerExecutionTimeInMS,0)\n| order by ApproxTime desc ",
            "id": "5b2f6f11-232e-4960-8f6a-70c570bf2293",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where aadTenantId <> 'common' //Not possible to report OnPrem customers decently in this query (need to look at companyName)\n| summarize count() by tenantDescription\n| order by count_ desc \n| take 10 //Top 10",
            "id": "2d06aa6b-32d2-4408-8e5c-b4e7d09f00df",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "let TracesPlusPageviews = \n    traces \n    | union pageViews \n    | where timestamp between (_startTime .. _endTime)\n    | count \n    | extend Desc = 'traces + pageViews'; \nlet BaseCustomers = \n    allTraces \n    | count \n    | extend Desc = 'allTraces';\nTracesPlusPageviews\n| union BaseCustomers",
            "id": "993241f6-5675-4f33-8cac-331a3c512628",
            "usedVariables": [
                "_endTime",
                "_startTime",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "let TempAllTraces = \n    traces\n    | extend aadTenantId = tostring(customDimensions.aadTenantId)\n    , componentVersion = tostring(customDimensions.componentVersion)\n    , environmentType = tostring(customDimensions.environmentType)\n    | where isnotempty( componentVersion)\n    | where isnotempty( environmentType)\n    | where environmentType <> 'Sandbox'\n    | summarize componentVersion = max(componentVersion) by aadTenantId, environmentType\n    ;\nentraTenantIdDescriptions\n| join kind=leftouter TempAllTraces on $left.entraTenantId == $right.aadTenantId\n| project aadTenantId, tenantDescription, componentVersion",
            "id": "58f01ab5-5d84-4847-bda3-2b78e43ee679",
            "usedVariables": [
                "entraTenantIdDescriptions"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( customDimensions.sqlStatement) //Anything with sqlStatement\n| where isnotempty( elapsedTimeInMS)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n| where ObjectId contains _sourceObjectFilter\n| summarize toint(avg(elapsedTimeInMS)), count() by tenantDescription, eventDescription, eventId\n| order by avg_elapsedTimeInMS desc\n| take 1000\n",
            "id": "4b150885-b38a-4517-93bb-a99ee9c80484",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'\n| extend endpoint = tostring(customDimensions.endpoint)\n, ObjectName = tostring(customDimensions.alObjectName)\n, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n| where ObjectName contains _sourceObjectFilter\n| summarize count() by bin(timestamp, 1h), endpoint, tenantDescription //put endpoint and customer in the graph\n",
            "id": "af89f492-93e8-4839-b5d4-9adbbb0e1547",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'\n| extend endpoint = tostring(customDimensions.endpoint)\n, alObjectName = tostring(customDimensions.alObjectName)\n, serverExecutionTimeInMS = toint(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, totalTimeInMS = toint(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n, queryFilter = tostring(customDimensions.queryFilter)\n, category = tostring(customDimensions.category)\n| where alObjectName contains _sourceObjectFilter\n| order by timestamp desc \n| project \n    tenantDescription\n    , timestamp \n    , alObjectName\n    , endpoint\n    , category\n    , queryFilter\n    , serverExecutionTimeInMS\n    , customDimensions\n| order by timestamp desc \n| take 1000",
            "id": "2f9bb530-235a-41fe-a985-e634c73d2b42",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( customDimensions.sqlStatement) //Anything with sqlStatement\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    // , extensionName = tostring(customDimensions.extensionName)\n    // , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| project timestamp\n    , eventId\n    , message\n    , componentVersion\n    , tenantDescription\n    // , companyName\n    , extensionName\n    , extensionPublisher\n    , splitStacktrace\n    , SourceProcess\n    , SlowObject\n    , alObjectType\n    , alObjectName\n    , alObjectId\n    , elapsedTimeInMS\n    , customDimensions\n    , sqlStatement\n| order by timestamp desc \n| take 1000",
            "id": "d3eaf6da-e33f-4df0-a51f-7bdc7a6b74be",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( customDimensions.sqlStatement)\n| where isnotempty( customDimensions.alStackTrace)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , componentVersion = tostring(customDimensions.componentVersion)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| project timestamp\n    , eventId\n    , message\n    , componentVersion\n    , tenantDescription\n    // , companyName\n    , extensionName\n    , extensionPublisher\n    , splitStacktrace\n    , SourceProcess\n    , SlowObject\n    , alObjectType\n    , alObjectName\n    , alObjectId\n    , elapsedTimeInMS\n    , customDimensions\n    , sqlStatement\n| summarize count(), avg(elapsedTimeInMS) by SlowObject",
            "id": "84119f35-8a26-4a44-ae1b-522f34cb52ff",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( customDimensions.sqlStatement)\n| where isnotempty( customDimensions.alStackTrace)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , componentVersion = tostring(customDimensions.componentVersion)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| summarize count(), toint(avg(elapsedTimeInMS)) by SlowObject\n| order by count_ desc ",
            "id": "211fa387-be45-48ce-91e0-a5622c028478",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "9b59ad62-82a8-43d2-afbd-0ec79d1e313c"
            },
            "text": "traces\n| where timestamp >= ago(30d)\n| where customDimensions has 'AL0000DGF'\n| where customDimensions.alTag has_any (_BCPTTag)\n| where customDimensions has _codeunitName\n| where customDimensions.alOperation == 'Scenario'\n| where customDimensions.alStatus == 'Success'\n| extend RunId = tostring(customDimensions.alRunID)\n    , Suite = tostring(customDimensions.alCode)\n    , CodeunitName = tostring(customDimensions.alCodeunitName)\n    , Operation = tostring(customDimensions.alOperation)\n    , Tag = iif(customDimensions.alTag contains_cs \"PTE\", \"PTE\", \n                iif(customDimensions.alTag contains \"Focus\", \"CustSpecific\"\n                    , tostring(customDimensions.alTag)))\n    , Version = tostring(customDimensions.alVersion)\n    , DurationInMs = toint(customDimensions.alDurationInMs)\n    , NoOfSqlStatements = toint(customDimensions.alNoOfSqlStatements)\n    , alStatus = tostring(customDimensions.alStatus)\n    , alMessage = tostring(customDimensions.alMessage)\n    , Week = strcat(format_datetime(timestamp, \"yyyy\"),'-',week_of_year(timestamp))\n| order by timestamp desc\n| summarize count = count(), avgNoOfSqlStatements = toint(avg(NoOfSqlStatements)), avgDuration = toint(avg(DurationInMs)) by bin(timestamp, 1d), CodeunitName, Tag\n| order by timestamp, Tag, CodeunitName\n",
            "id": "596d541c-2ab6-4ed0-9769-d18f33766c72",
            "usedVariables": [
                "_BCPTTag",
                "_codeunitName"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "9b59ad62-82a8-43d2-afbd-0ec79d1e313c"
            },
            "text": "traces\n| where timestamp >= ago(30d)\n| where customDimensions has 'AL0000DGF'\n| where customDimensions.alTag has_any (_BCPTTag)\n| where customDimensions has _codeunitName\n| where customDimensions.alOperation == 'Scenario'\n| where customDimensions.alStatus == 'Success'\n| extend RunId = tostring(customDimensions.alRunID)\n    , Suite = tostring(customDimensions.alCode)\n    , CodeunitName = tostring(customDimensions.alCodeunitName)\n    , Operation = tostring(customDimensions.alOperation)    \n    , Tag = iif(customDimensions.alTag contains_cs \"PTE\", \"PTE\", \n                iif(customDimensions.alTag contains \"Focus\", \"CustSpecific\"\n                    , tostring(customDimensions.alTag)))\n    , Version = tostring(customDimensions.alVersion)\n    , DurationInMs = toint(customDimensions.alDurationInMs)\n    , NoOfSqlStatements = toint(customDimensions.alNoOfSqlStatements)\n    , alStatus = tostring(customDimensions.alStatus)\n    , alMessage = tostring(customDimensions.alMessage)\n    , Week = strcat(format_datetime(timestamp, \"yyyy\"),'-',week_of_year(timestamp))\n| order by timestamp desc\n| summarize count = count(), avgDuration = toint(avg(DurationInMs)) by bin(timestamp, 1d), CodeunitName, Tag\n| order by timestamp, Tag, CodeunitName\n",
            "id": "e015b09f-59c2-4fa5-9463-e00e7f38ef19",
            "usedVariables": [
                "_BCPTTag",
                "_codeunitName"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "9b59ad62-82a8-43d2-afbd-0ec79d1e313c"
            },
            "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions has 'AL0000DGF'\n| where customDimensions.alTag has_any (_BCPTTag)\n| where customDimensions has _codeunitName\n| where customDimensions.alOperation == 'Scenario'\n| where customDimensions.alStatus == 'Error'\n| extend RunId = tostring(customDimensions.alRunID)\n    , Suite = tostring(customDimensions.alCode)\n    , CodeunitName = tostring(customDimensions.alCodeunitName)\n    , Operation = tostring(customDimensions.alOperation)\n    , Tag = iif(customDimensions.alTag contains_cs \"PTE\", \"PTE\", \n                iif(customDimensions.alTag contains \"Focus\", \"CustSpecific\"\n                    , tostring(customDimensions.alTag)))\n    , Version = tostring(customDimensions.alVersion)\n    , DurationInMs = toint(customDimensions.alDurationInMs)\n    , NoOfSqlStatements = toint(customDimensions.alNoOfSqlStatements)\n    , alStatus = tostring(customDimensions.alStatus)\n    , alMessage = tostring(customDimensions.alMessage)\n    , Week = strcat(format_datetime(timestamp, \"yyyy\"),'-',week_of_year(timestamp))\n| order by timestamp desc\n| summarize count = count(), avgNoOfSqlStatements = toint(avg(NoOfSqlStatements)), avgDuration = toint(avg(DurationInMs)) by bin(timestamp, 1d), CodeunitName, Tag\n| order by timestamp, Tag, CodeunitName\n",
            "id": "d7e329ec-1be0-4b5f-a76a-7528f76a4e88",
            "usedVariables": [
                "_BCPTTag",
                "_codeunitName",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "9b59ad62-82a8-43d2-afbd-0ec79d1e313c"
            },
            "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where customDimensions has 'AL0000DGF'\n| where customDimensions.alTag has_any (_BCPTTag)\n| where customDimensions has _codeunitName\n| where customDimensions.alOperation == 'Scenario'\n| where customDimensions.alStatus == 'Error'\n| extend RunId = tostring(customDimensions.alRunID)\n    , Suite = tostring(customDimensions.alCode)\n    , CodeunitName = tostring(customDimensions.alCodeunitName)\n    , Operation = tostring(customDimensions.alOperation)\n    , Tag = iif(customDimensions.alTag contains_cs \"PTE\", \"PTE\", \n                iif(customDimensions.alTag contains \"Focus\", \"CustSpecific\"\n                    , tostring(customDimensions.alTag)))\n    , Version = tostring(customDimensions.alVersion)\n    , DurationInMs = toint(customDimensions.alDurationInMs)\n    , NoOfSqlStatements = toint(customDimensions.alNoOfSqlStatements)\n    , alStatus = tostring(customDimensions.alStatus)\n    , alMessage = tostring(customDimensions.alMessage)\n    , Week = strcat(format_datetime(timestamp, \"yyyy\"),'-',week_of_year(timestamp))\n| order by timestamp desc\n| project Tag, CodeunitName, alMessage, DurationInMs, NoOfSqlStatements",
            "id": "855b24d7-74f8-4f41-9b7b-d51f91334ca1",
            "usedVariables": [
                "_BCPTTag",
                "_codeunitName",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where timestamp between (_endTime - 24h .. _endTime)\n| summarize count() by bin(timestamp,15m)",
            "id": "399919e2-8c95-4276-b710-77860edf6192",
            "usedVariables": [
                "_endTime",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'\n| extend decentMessage = iif(indexof(message, \":\") <= 0, message, substring(message, 0, indexof(message, \":\")))\n, endpoint = tostring(customDimensions.endpoint)\n, alObjectName = tostring(customDimensions.alObjectName)\n, serverExecutionTime = tostring(customDimensions.serverExecutionTime)\n, serverExecutionTimeInMS = toint(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, totalTime = tostring(customDimensions.totalTime)\n, totalTimeInMS = toint(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n, queryFilter = tostring(customDimensions.queryFilter)\n, category = tostring(customDimensions.category)\n| where alObjectName contains _sourceObjectFilter\n| summarize count = count() by tenantDescription\n",
            "id": "e5234813-5d6a-4ade-b945-f3bfe26ec490",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'\n| extend decentMessage = iif(indexof(message, \":\") <= 0, message, substring(message, 0, indexof(message, \":\")))\n, endpoint = tostring(customDimensions.endpoint)\n, alObjectName = tostring(customDimensions.alObjectName)\n, serverExecutionTime = tostring(customDimensions.serverExecutionTime)\n, serverExecutionTimeInMS = toint(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, totalTime = tostring(customDimensions.totalTime)\n, totalTimeInMS = toint(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n, queryFilter = tostring(customDimensions.queryFilter)\n, category = tostring(customDimensions.category)\n| where alObjectName contains _sourceObjectFilter\n| summarize count = count() by endpoint\n",
            "id": "23c4e66b-075f-4034-9704-6a7a21c7308d",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "//Thanks for the idea, Stefano Demiliani!\n\nallTraces\n| where eventId == 'RT0008'\n     and customDimensions.category == 'ODataV4'\n| where customDimensions contains \"DynamicsOfficeApp\"\n| extend httpHeadersTmp =  tostring( customDimensions.httpHeaders)\n| extend httpHeadersJSON = parse_json(httpHeadersTmp)\n| where httpHeadersJSON.['ms-dyn-useragent'] contains \"DynamicsOfficeApp\"\n| extend httpStatusCode = customDimensions.httpStatusCode\n    , environmentName = customDimensions.environmentName\n    , environmentType = customDimensions.environmentType\n    , alObjectId = customDimensions.alObjectId\n    , alObjectName = customDimensions.alObjectName\n    , endpoint = customDimensions.endpoint\n| project timestamp,  tenantDescription, alObjectId, alObjectName, totalTime, httpStatusCode, environmentName, environmentType, endpoint, message,  customDimensions\n| order by timestamp desc \n",
            "id": "ef4ad8cf-50d4-4970-8008-b016d49f173c",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\r\n| order by timestamp desc \r\n| take 100",
            "id": "5741837b-3d01-4010-8da9-db6401627f0d",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0008'\n| extend endpoint = tostring(customDimensions.endpoint)\n, ObjectName = tostring(customDimensions.alObjectName)\n, serverExecutionTimeInMS = toreal(totimespan(customDimensions.serverExecutionTime))/10000 //the datatype for executionTime is timespan \n, totalTimeInMS = toreal(totimespan(customDimensions.totalTime))/10000 //the datatype for executionTime is timespan \n| where ObjectName contains _sourceObjectFilter\n| summarize avgTotalTime = avg(totalTimeInMS) by bin(timestamp, 1h), endpoint, tenantDescription //put endpoint and customer in the graph\n",
            "id": "1707f0fd-c4db-448d-a617-3e1a3c7a4e25",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = message\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by TenantMeasuredFunction, tenantDescription, message ",
            "id": "262f4783-c556-40d5-bae2-0e961cf9337c",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( customDimensions.sqlStatement) //Anything with sqlStatement\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    // , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackExtensionName = iif(isempty( topOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( topOfStackExtensionName contains \"iFacto\" \n                or topOfStackExtensionName contains \"Single\"\n                or topOfStackExtensionName contains \"Distri\"\n                or topOfStackExtensionName contains \"Commerce\"\n                    , topOfStackExtensionName, 'PTE')))\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackExtensionName = iif(isempty( bottomOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( bottomOfStackExtensionName contains \"iFacto\" \n                or bottomOfStackExtensionName contains \"Single\"\n                or bottomOfStackExtensionName contains \"Distri\"\n                or bottomOfStackExtensionName contains \"Commerce\"\n                    , bottomOfStackExtensionName, 'PTE')))\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| summarize avgElapsedtime = avg(elapsedTimeInMS) by SourceProcess",
            "id": "49052ba3-baff-434e-a2fc-77a788f4bfec",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( customDimensions.sqlStatement) //Anything with sqlStatement\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    // , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackExtensionName = iif(isempty( topOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( topOfStackExtensionName contains \"iFacto\" \n                or topOfStackExtensionName contains \"Single\"\n                or topOfStackExtensionName contains \"Distri\"\n                or topOfStackExtensionName contains \"Commerce\"\n                    , topOfStackExtensionName, 'PTE')))\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackExtensionName = iif(isempty( bottomOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( bottomOfStackExtensionName contains \"iFacto\" \n                or bottomOfStackExtensionName contains \"Single\"\n                or bottomOfStackExtensionName contains \"Distri\"\n                or bottomOfStackExtensionName contains \"Commerce\"\n                    , bottomOfStackExtensionName, 'PTE')))\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| summarize avgElapsedtime = avg(elapsedTimeInMS) by SlowObject",
            "id": "a9d71a9c-8539-4b4b-98a4-0855485897fc",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( customDimensions.sqlStatement) //Anything with sqlStatement\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| project timestamp\n    , eventId\n    , message\n    , componentVersion\n    , tenantDescription\n    // , companyName\n    , extensionName\n    , extensionPublisher\n    , splitStacktrace\n    , SourceProcess\n    , SlowObject\n    , alObjectType\n    , alObjectName\n    , alObjectId\n    , elapsedTimeInMS\n    , customDimensions\n    , sqlStatement\n| summarize avg(elapsedTimeInMS) by bin(timestamp, 1d), tenantDescription",
            "id": "5befc736-26de-4200-a0a9-977911ee53eb",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "externaldata(eventId :string, eventArea:string, eventDescription:string)\n        [h@'https://raw.githubusercontent.com/waldo1001/waldo.BCTelemetry/master/Azure%20Data%20Explorer/ExternalData/Signals.json']\n            with(format='multijson')\n| where eventDescription contains _MessageFilter\n| where eventArea has_any (_Area);",
            "id": "629a37ee-dd78-4782-b8e2-a9424b420c9a",
            "usedVariables": [
                "_Area",
                "_MessageFilter"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isempty(customDimensions.sqlStatement) //Anything without sqlStatement\n| where isnotempty( elapsedTimeInMS)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n| where ObjectId contains _sourceObjectFilter\n| summarize toint(avg(elapsedTimeInMS)), count() by tenantDescription, eventDescription, eventId\n| order by avg_elapsedTimeInMS desc\n| take 1000\n",
            "id": "fe2df169-4312-444d-aafa-49c4d1dc6f21",
            "usedVariables": [
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| project timestamp\n    , eventId\n    , message\n    , componentVersion\n    , tenantDescription\n    // , companyName\n    , extensionName\n    , extensionPublisher\n    , splitStacktrace\n    , SourceProcess\n    , SlowObject\n    , alObjectType\n    , alObjectName\n    , alObjectId\n    , elapsedTimeInMS\n    , customDimensions\n    , sqlStatement\n| order by timestamp desc \n| take 1000",
            "id": "15930a4b-a6ee-467a-aa40-d96a3d3eca90",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    // , extensionName = tostring(customDimensions.extensionName)\n    // , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| project timestamp\n    , eventId\n    , message\n    , componentVersion\n    , tenantDescription\n    // , companyName\n    , extensionName\n    , extensionPublisher\n    , splitStacktrace\n    , SourceProcess\n    , SlowObject\n    , alObjectType\n    , alObjectName\n    , alObjectId\n    , elapsedTimeInMS\n    , customDimensions\n    , sqlStatement\n| order by timestamp desc \n| take 1000",
            "id": "65ca5e05-10b4-495e-90d2-5586bb7cc037",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , componentVersion = tostring(customDimensions.componentVersion)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| project timestamp\n    , eventId\n    , message\n    , componentVersion\n    , tenantDescription\n    // , companyName\n    , extensionName\n    , extensionPublisher\n    , splitStacktrace\n    , SourceProcess\n    , SlowObject\n    , alObjectType\n    , alObjectName\n    , alObjectId\n    , elapsedTimeInMS\n    , customDimensions\n    , sqlStatement\n| summarize count(), avg(elapsedTimeInMS) by SlowObject",
            "id": "8f598188-08d1-46ca-a0ae-ec3493f46a36",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , componentVersion = tostring(customDimensions.componentVersion)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| summarize count(), toint(avg(elapsedTimeInMS)) by SlowObject\n| order by count_ desc ",
            "id": "6371b185-f7e3-48e6-8fcc-319dd18a4838",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    // , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackExtensionName = iif(isempty( topOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( topOfStackExtensionName contains \"iFacto\" \n                or topOfStackExtensionName contains \"Single\"\n                or topOfStackExtensionName contains \"Distri\"\n                or topOfStackExtensionName contains \"Commerce\"\n                    , topOfStackExtensionName, 'PTE')))\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackExtensionName = iif(isempty( bottomOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( bottomOfStackExtensionName contains \"iFacto\" \n                or bottomOfStackExtensionName contains \"Single\"\n                or bottomOfStackExtensionName contains \"Distri\"\n                or bottomOfStackExtensionName contains \"Commerce\"\n                    , bottomOfStackExtensionName, 'PTE')))\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| summarize avgElapsedtime = avg(elapsedTimeInMS) by SourceProcess",
            "id": "823b2d94-9a33-46ce-87e2-c7d8916ca2dd",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    // , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackExtensionName = iif(isempty( topOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( topOfStackExtensionName contains \"iFacto\" \n                or topOfStackExtensionName contains \"Single\"\n                or topOfStackExtensionName contains \"Distri\"\n                or topOfStackExtensionName contains \"Commerce\"\n                    , topOfStackExtensionName, 'PTE')))\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackExtensionName = iif(isempty( bottomOfStackExtensionName), 'N/A',\n        iif(extensionPublisher !contains 'iFacto' and extensionPublisher !contains 'Microsoft', 'ISV',\n            iif( bottomOfStackExtensionName contains \"iFacto\" \n                or bottomOfStackExtensionName contains \"Single\"\n                or bottomOfStackExtensionName contains \"Distri\"\n                or bottomOfStackExtensionName contains \"Commerce\"\n                    , bottomOfStackExtensionName, 'PTE')))\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| summarize avgElapsedtime = avg(elapsedTimeInMS) by SlowObject",
            "id": "4037ee5f-d0b5-41ea-8e7d-4ff3d7b68184",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace) //Anything with a stacktrace (Actionable)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n//from Microsoft: analyze the stacktrace, eventually to get top and bottom line\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n//SourceProcess = bottom, SlowObject = Top\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| project timestamp\n    , eventId\n    , message\n    , componentVersion\n    , tenantDescription\n    // , companyName\n    , extensionName\n    , extensionPublisher\n    , splitStacktrace\n    , SourceProcess\n    , SlowObject\n    , alObjectType\n    , alObjectName\n    , alObjectId\n    , elapsedTimeInMS\n    , customDimensions\n    , sqlStatement\n| summarize avg(elapsedTimeInMS) by bin(timestamp, 1d), tenantDescription",
            "id": "f5195a3f-a222-40da-a75d-ee80cbd3d027",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where itemType == 'pageView'\n| where name !in (\"Dialog\")\n| summarize count(), avgDuration = toint(avg(duration)) by name\n| project Page = name, count_, avgDuration, totalWaitTime = count_ * avgDuration\n| order by totalWaitTime desc ",
            "id": "cfc168b9-5e57-4738-87f0-8adc55897900",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where tenantDescription <> 'common' // \"common\" = alle OnPrem customers, which don't make sense in this graph\n| where itemType == 'pageView'\n| where name !in (\"Dialog\")\n| summarize count(), avgDuration = toint(avg(duration)) by tenantDescription, name\n| project Page = name, tenantDescription, count_, avgDuration, totalWaitTime = count_ * avgDuration\n| order by totalWaitTime desc \n| take 50",
            "id": "1ed9a521-f614-432d-87db-378f80b5e8d3",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty(customDimensions.environmentType)\n| where timestamp >= ago(10d)\n| where isnotempty(companyName)\n| extend aadTenantId = tostring(customDimensions.aadTenantId)\n| extend companyName = tostring(customDimensions.companyName)\n| extend environmentName = tostring(customDimensions.environmentName)\n| extend IsSaas  = iff(isempty(environmentName) or environmentName in ('common','null','default','undefined'),false,true)\n| extend environmentType = iff(tobool(IsSaas),tostring(customDimensions.environmentType), \n                                iff(isempty(environmentName) or environmentName in ('common','null','default','undefined'),'OnPrem','SaaS'))\n| where environmentType == 'Production'\n    or (environmentName !contains 'TEST'\n    and environmentName !contains 'QA'\n    and environmentName !contains 'TRAINING')\n| summarize NoOfSignals = count() by aadTenantId, tenantDescription, companyName, environmentName, environmentType, IsSaas, componentVersion, callerAppVersion\n| project aadTenantId, tenantDescription, companyName, environmentName, environmentType, IsSaas, NoOfSignals, componentVersion, callerAppVersion\n",
            "id": "7313dd17-0115-4a1f-bc38-9b7c4511ab36",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId == 'RT0018'\n| where isnotempty( customDimensions.alStackTrace)\n| where isnotempty( elapsedTimeInMS)\n| extend alObjectName = tostring(customDimensions.alObjectName)\n    , alObjectType = tostring(customDimensions.alObjectType)\n    , alObjectId = tostring(customDimensions.alObjectId)\n    , extensionPublisher = tostring(customDimensions.extensionPublisher)\n    , companyName = tostring(customDimensions.companyName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , componentVersion = tostring(customDimensions.componentVersion)\n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = iif(tostring(splitStacktrace[0]) contains \"ObjectType\", tostring(splitStacktrace[2]), tostring(splitStacktrace[0]))\n    , bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , SlowObject = strcat(topOfStackWhatWasCalled , \" - \", topOfStackObjectType, \" \", topOfStackObjectId, \" \", topOfStackObjectName, \" (\", topOfStackExtensionName, \")\")\n| extend SourceProcess = iif(strlen( SourceProcess) >= 10, SourceProcess, trim(@\"[^\\w]+\",strcat(splitStacktrace[0], \" \", splitStacktrace[1])))\n| extend SlowObject = iif(strlen( SlowObject) >= 10, SlowObject, SourceProcess)\n| where SourceProcess contains _sourceObjectFilter\n| where SlowObject contains _SlowObjectFilter\n| summarize count(), toint(avg(elapsedTimeInMS)) by bin(timestamp, 1h), SourceProcess\n| extend totalTime = count_ * avg_elapsedTimeInMS\n| project timestamp, SourceProcess, totalTime\n| order by totalTime\n| take 75\n",
            "id": "4485bd63-2d48-45eb-99cd-7b485f0d1e63",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by tenantDescription, bin(timestamp, 1d)",
            "id": "b2a9e7a9-3846-4224-b69c-8671c9fc3d4c",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId in (\"RT0005\") //Slow running SQL\n| where isnotempty( elapsedTimeInMS)\n| where isnotempty( componentVersion)\n| extend componentVersion = extract(\"^(\\\\d+\\\\.\\\\d+)\",1,componentVersion)\n| summarize toint(avg(elapsedTimeInMS)) by version = strcat(\"Server: \", componentVersion)",
            "id": "d00c48f9-d24c-4c89-9950-647d480789a4",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId in (\"RT0018\") //Slow running AL\n| where isnotempty( elapsedTimeInMS)\n| where isnotempty( extensionName) \n| summarize toint(avg(elapsedTimeInMS)) by extensionName\n| order by avg_elapsedTimeInMS desc\n| take 10",
            "id": "2dae8d03-cbe3-482e-80c7-2685f33e07f0",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( clientType)\n| summarize count() by bin(timestamp, 1h), clientType",
            "id": "8481afe5-97d7-4a4e-8dea-f2d9af5aff22",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId in (\"RT0005\") //Slow running SQL\n| where isnotempty( elapsedTimeInMS)\n| summarize toint(avg(elapsedTimeInMS)) by tenantDescription\n| order by avg_elapsedTimeInMS desc ",
            "id": "9ba8c656-270f-42fd-a6e7-f1923f02135b",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId in (\"RT0018\") //Slow running AL\n| where isnotempty( elapsedTimeInMS)\n| summarize toint(avg(elapsedTimeInMS)) by tenantDescription\n| order by avg_elapsedTimeInMS desc ",
            "id": "6d9c2503-d9a0-46b5-897a-40c028daa655",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId in (\"RT0005\") //Slow running SQL\n| where isnotempty( elapsedTimeInMS)\n| where isnotempty( extensionName) \n| summarize toint(avg(elapsedTimeInMS)) by extensionName\n| order by avg_elapsedTimeInMS desc\n| take 10",
            "id": "cf67ae6b-b720-41d9-939e-97db5b01ece8",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where eventId in (\"RT0018\") //Slow running AL\n| where isnotempty( elapsedTimeInMS)\n| where isnotempty( componentVersion)\n| extend componentVersion = extract(\"^(\\\\d+\\\\.\\\\d+)\",1,componentVersion)\n| summarize toint(avg(elapsedTimeInMS)) by version = strcat(\"Server: \", componentVersion)\n",
            "id": "ab074c67-7e0f-4709-b9f8-1cca4f970c9c",
            "usedVariables": [
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "d1beef7f-3df5-4cb4-b1bd-dfa9e1c8ee0d"
            },
            "text": "//Get CodeunitNames\nlet codeunitNames = \n    traces\n    | where timestamp between (_startTime .. _endTime)\n    | where customDimensions has 'ALIFCTST0002' //Full Codeunit Run\n    | extend codeunitName = tostring(customDimensions.alName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n    | summarize by codeunitId, codeunitName;\n//Take first 2 days of the period\nlet BeginningOfPeriod = \n    traces\n    | where timestamp between (_startTime .. _startTime + 2d)\n    | where tostring(customDimensions.eventId) == \"ALIFCTST0003\" //One function (method)\n    | extend CodeunitName = tostring(customDimensions.alName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n        , MethodName = tostring(customDimensions.alMethodName)\n        , NoOfSqlStatements = toint(customDimensions.alNoOfSQLStatements)\n        , DurationMs = toint(customDimensions.alDurationMs)\n    | join kind = leftouter codeunitNames on $left.codeunitId == $right.codeunitId\n    | extend FQMethod = strcat(codeunitName,'.',MethodName)\n    | where FQMethod contains _MessageFilter or message  contains _MessageFilter\n    | summarize avgDurationMs=avg(DurationMs) by FQMethod;\n//Then take last 2 days of the period\nlet EndOfPeriod = \n    traces\n    | where timestamp between (_endTime - 2d .. _endTime)\n    | where tostring(customDimensions.eventId) == \"ALIFCTST0003\"\n    | extend CodeunitName = tostring(customDimensions.alName)\n        , codeunitId = tostring(customDimensions.alCodeunitId)\n        , MethodName = tostring(customDimensions.alMethodName)\n        , NoOfSqlStatements = toint(customDimensions.alNoOfSQLStatements)\n        , DurationMs = toint(customDimensions.alDurationMs)\n    | join kind = leftouter codeunitNames on $left.codeunitId == $right.codeunitId\n    | extend FQMethod = strcat(codeunitName,'.',MethodName)\n    | where FQMethod contains _MessageFilter or message  contains _MessageFilter\n    | summarize avgDurationMs=avg(DurationMs) by FQMethod;\n//calculate difference, and take top 10 of the methods\nlet Difference = \n    BeginningOfPeriod\n    | join kind=leftouter EndOfPeriod on $left.FQMethod == $right.FQMethod\n    | extend Difference =  avgDurationMs1 - avgDurationMs\n    | order by Difference desc\n    | take 10;\n//Result, getting methods only\ntraces\n| where timestamp between (_startTime .. _endTime)\n| where tostring(customDimensions.eventId) == \"ALIFCTST0003\"\n| extend\n    codeunitId = tostring(customDimensions.alCodeunitId)\n    , MethodName = tostring(customDimensions.alMethodName)\n    , NoOfSqlStatements = toint(customDimensions.alNoOfSQLStatements)\n    , DurationMs = toint(customDimensions.alDurationMs)\n| join kind = leftouter codeunitNames on $left.codeunitId == $right.codeunitId\n| extend FQMethod = strcat(codeunitName,'.',MethodName)\n| join kind=rightouter Difference on $left.FQMethod == $right.FQMethod\n| project timestamp, FQMethod, DurationMs\n| summarize avgDurationMs=avg(DurationMs) by bin(timestamp, 1d), FQMethod\n| order by FQMethod",
            "id": "271ceb1b-5f57-42a7-b24d-9d12a31751d9",
            "usedVariables": [
                "_MessageFilter",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by MeasuredFunction, bin(timestamp, 1d)",
            "id": "5d5f6cfe-6c35-4725-812e-4688dbed4019",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize count(), avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by TenantMeasuredFunction, bin(timestamp, 1d)",
            "id": "4806e077-c6fa-4c5b-843c-faad88acf48f",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by tenantDescription, bin(timestamp, 1d)",
            "id": "96589d58-5e35-4bbc-a66f-ee7fb8ea55ae",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by MeasuredFunction, bin(timestamp, 1d)",
            "id": "bdb0d684-097f-4379-ba7c-7a3456528699",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize count(), avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by TenantMeasuredFunction, bin(timestamp, 1h)",
            "id": "ec8e7a0f-0856-4fa9-ba7f-b42f62a7e46b",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize count(), avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by tenantDescription, bin(timestamp, 1h)",
            "id": "ce98ec9f-2df9-4f23-afd7-789d210617cd",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = message\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by tenantDescription ",
            "id": "b4f5a0d6-7873-4918-8508-33936a6844fe",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize count(), avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by TenantMeasuredFunction, bin(timestamp, 1h)",
            "id": "e1c3198d-7cc9-4e92-8730-b45e133366ca",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where timestamp between (_endTime - 24h .. _endTime)\n| where itemType == 'pageView'\n| where name !in (\"Dialog\")\n| where customDimensions has \"Item List\"\n| summarize toint(avg(duration)) by bin(timestamp, 1h), tenantDescription\n// | project Page = name, count_, avgDuration, totalWaitTime = count_ * avgDuration",
            "id": "af753aee-0228-4315-9319-da9d1bdae041",
            "usedVariables": [
                "_endTime",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where customDimensions.eventId == 'ALIFCTLM0002'\n| extend Duration = toint(customDimensions.alDuration)\n    , NoOfSqlStatements = toint(customDimensions.alNoSqlStatements)\n    , MeasuredFunction = tostring(message)\n    , TenantMeasuredFunction = strcat(tenantDescription,\".\",message)\n| where MeasuredFunction contains _MeasuredFunction\n| summarize count(), avgDuration = toint(avg(Duration)), avgNoSqlStatements = toint(avg(NoOfSqlStatements)) by bin(timestamp, 1h)",
            "id": "4b24d44b-2b47-4b2e-a37c-9c5f17848a08",
            "usedVariables": [
                "_MeasuredFunction",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "// DeadLocks - by Source Process\n\nallTraces\n| where customDimensions.eventId == 'RT0028'\n| where customDimensions.alObjectId != '0' \n| where isnotempty(customDimensions.alObjectId)\n| extend ObjectType = tostring(customDimensions.alObjectType)\n    , ObjectId = tostring(customDimensions.alObjectId)\n    , ObjectName = tostring(customDimensions.alObjectName)\n    , sqlStatement = tostring(customDimensions.sqlStatement)\n    , companyName = tostring(customDimensions.companyName)        \n    , numberOfJoins = countof(tostring(customDimensions.sqlStatement), \"JOIN\")\n    , EventId = tostring(customDimensions.eventId)\n    , StackTrace = tostring(customDimensions.alStackTrace)\n    , userId = user_Id\n| extend operationType = case(\n    sqlStatement startswith \"UPDATE\", \"UPDATE\"\n    , sqlStatement startswith \"DELETE\", \"DELETE\"\n    , sqlStatement startswith \"BeginTransaction\", \"BEGIN_TRANS\"\n    , sqlStatement matches regex \"INSERT INTO\", \"INSERT\"\n    , sqlStatement startswith \"SELECT\", \"SELECT\"\n    , sqlStatement matches regex \"IF EXISTS \\\\(SELECT (.*)\\\\) SELECT\", \"SELECT'\"\n    , sqlStatement has \"SELECT NEXT VALUE FOR\", \"SELECT_SEQUENCE_VALUE\"\n    , sqlStatement has \"SELECT @@SPID\", \"SELECT_SPID\"\n    , sqlStatement matches regex \"(.*)WITH\", \"SELECT\"\n    , sqlStatement startswith \"CREATE TABLE\", \"CREATE_TABLE\"\n    , sqlStatement startswith \"ALTER TABLE\", \"ALTER_TABLE\"\n    , sqlStatement startswith \"exec sp_rename\", \"RENAME_TABLE\" \n    , sqlStatement matches regex \"(.*)DROP TABLE\", \"DROP_TABLE\"\n    , sqlStatement startswith \"SET LOCK_TIMEOUT\", \"SET_LOCK_TIMEOUT\"\n    , sqlStatement has \"sp_getapplock\", \"GET_APP_LOCK\"\n    , \"UNKNOWN\"\n    ) \n| parse kind=regex sqlStatement with selectPart: string \"FROM \\\"SQLDATABASE\\\".dbo.\\\"CURRENTCOMPANY\\\\$\" tablename: string \"\\\\$\" space: string\n| extend splitStacktrace = split(customDimensions.alStackTrace, \"\\n\")\n| extend lengthStacktrace = array_length(splitStacktrace)\n| extend\n    topOfStackline = tostring(splitStacktrace[0]),\n    bottomOfStackline = tostring(splitStacktrace[lengthStacktrace - 1])\n| extend topOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, topOfStackline)\n| extend topOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, topOfStackline)\n| extend topOfStackLineNumber = extract(' line (\\\\d+)', 1, topOfStackline)\n| extend topOfStackExtensionName = case (\n    isnotempty(topOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, topOfStackline),\n    extract(' - (.+) by', 1, topOfStackline)\n    )\n| extend topOfStackPublisher = extract('.+ by (.+)', 1, topOfStackline)\n| extend topOfStackWhatWasCalled = case(\n    isnotempty(topOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, topOfStackline),\n    isnotempty(topOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, topOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, topOfStackline)\n    )\n| extend bottomOfStackObjectName = extract('\\\\\\\"?([^\\\\\\\"]+)\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectType = extract('\\\\(([a-zA-Z]+) \\\\d+\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackObjectId = extract('\\\\([a-zA-Z]+ (\\\\d+)\\\\)', 1, bottomOfStackline)\n| extend bottomOfStackLineNumber = extract(' line (\\\\d+)', 1, bottomOfStackline)\n| extend bottomOfStackExtensionName = case (\n    isnotempty(bottomOfStackLineNumber), extract('line \\\\d+ - (.+) by', 1, bottomOfStackline),\n    extract(' - (.+) by', 1, bottomOfStackline)\n    )\n| extend bottomOfStackPublisher = extract('.+ by (.+)', 1, bottomOfStackline)\n| extend bottomOfStackWhatWasCalled = case(\n    isnotempty(bottomOfStackLineNumber), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) line', 1, bottomOfStackline),\n    isnotempty(bottomOfStackExtensionName), extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+) -(.+) by (.+)', 1, bottomOfStackline),\n    extract('\\\\\\\"?[^\\\\\\\"]+\\\\\\\"?\\\\([a-zA-Z]+ \\\\d+\\\\).(.+)', 1, bottomOfStackline)\n    )\n| extend SourceProcess = strcat(bottomOfStackWhatWasCalled , \" - \", bottomOfStackObjectType, \" \", bottomOfStackObjectId, \" \", bottomOfStackObjectName, \" (\", bottomOfStackExtensionName, \")\")\n    , LockingObject = strcat(topOfStackObjectType, \" '\", topOfStackObjectName,\"'\")\n    , LockingObjectId = tostring(topOfStackObjectId)\n    , LockingObjectMethod = tostring(topOfStackWhatWasCalled)\n    , LockingObjectExtension = tostring(topOfStackExtensionName)\n| where SourceProcess contains _sourceObjectFilter\n| where LockingObject contains _SlowObjectFilter\n| project\n    timestamp,\n    aadTenantId,\n    companyName,\n    ObjectType,\n    ObjectId,\n    ObjectName,\n    operationType,\n    numberOfJoins,\n    LockingObject,\n    LockingObjectId,\n    LockingObjectMethod,\n    LockingObjectExtension,    \n    SourceProcess,\n    StackTrace,\n    customDimensions,\n    componentVersion, \n    tenantDescription\n| extend componentVersion = extract(\"^(\\\\d+\\\\.\\\\d+)\",1,componentVersion)\n| summarize count = count() by companyName, componentVersion\n| summarize toint(avg(count)) by componentVersion\n| order by componentVersion\n\n\n",
            "id": "882805a9-c54f-45b4-bc64-9432bd0a91b2",
            "usedVariables": [
                "_SlowObjectFilter",
                "_sourceObjectFilter",
                "allTraces"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "allTraces\n| where isnotempty( componentVersion)\n| where isnotempty( environmentType)\n| where isnotempty( companyName)\n| where companyName contains _CompanyFilter\n| where environmentType <> 'Sandbox'\n| summarize componentVersion = max(componentVersion) by aadTenantId,tenantDescription, environmentType, companyName\n| project companyName, tenantDescription, componentVersion, aadTenantId",
            "id": "747e9125-477b-4043-b484-4786fc800293",
            "usedVariables": [
                "_CompanyFilter",
                "allTraces"
            ]
        },
        {
            "id": "f2903aad-5c7e-44aa-96ec-38bf1ba218ea",
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "let SignalDefinitions = externaldata(eventId :string, eventArea:string, eventDescription:string)\n        [h@'https://raw.githubusercontent.com/waldo1001/waldo.BCTelemetry/master/Azure%20Data%20Explorer/ExternalData/Signals.json']\n            with(format='multijson')\n    | where eventId has_any (_eventId); //Filter as soon as possible\nlet TempAllTraces = \ntraces\n    | union pageViews                                      //union\n    | where timestamp between (_startTime .. _endTime)     //take the parameters by default\n    | where customDimensions has_any (_eventId)\n    | where message contains _MessageFilter\n    | where customDimensions contains _customDimensionsContains\n    | extend eventId = tostring(customDimensions.eventId)  //extend fields that you would extend anyway\n        , aadTenantId = tostring(customDimensions.aadTenantId)\n        , extensionName = tostring(customDimensions.extensionName)\n        , executionTime = customDimensions.executionTime\n        , serverExecutionTime = customDimensions.serverExecutionTime\n        , totalTime = customDimensions.totalTime\n        , durations = customMeasurements.durations\n        , alJobQueueExecutionTimeInMs = customDimensions.alJobQueueExecutionTimeInMs\n        , extensionPublisher = tostring(customDimensions.extensionPublisher)\n        , componentVersion = tostring(customDimensions.componentVersion)\n        , companyName = tostring(customDimensions.companyName)\n        , callerAppVersion = tostring(customDimensions.alCallerAppVersion)\n        , callerPublisher = tostring(customDimensions.alCallerPublisher)\n        , callerAppName = tostring(customDimensions.alCallerAppName)\n        , clientType = tostring(customDimensions.clientType)\n        , environmentName = tostring(customDimensions.environmentName)\n        , environmentType = tostring(customDimensions.environmentType)\n    | where environmentName in (_environmentName)\n    | where companyName contains _CompanyFilter\n    | where extensionName has_any (_extensionName)\n    | where eventId has_any (_eventId)                       //Filter as soon as possible\n    | where componentVersion startswith _componentVersionFilter\n//New field: elapsedTimeInMS\n    | extend elapsedTimeInMS = \n                iif(isnotempty(executionTime), toreal(totimespan(executionTime))/10000\n                , iif(isnotempty(serverExecutionTime), toreal(totimespan(serverExecutionTime))/10000\n                    , iif(isnotempty(totalTime), toreal(totimespan(totalTime))/10000\n                        , iif(isnotempty(durations), durations\n                            , iif(isnotempty( alJobQueueExecutionTimeInMs), alJobQueueExecutionTimeInMs\n                , dynamic(null))))));\n//Join first 2 (small table on the left)\nlet TempAllTraces2 = \nentraTenantIdDescriptions\n| join kind=rightouter TempAllTraces on $left.entraTenantId == $right.aadTenantId;\n//Join next 2 (small table on the left)\nSignalDefinitions\n| join kind=rightouter TempAllTraces2 on $left.eventId == $right.eventId\n| extend tenantDescription = iif(isempty( tenantDescription),tostring(aadTenantId),tenantDescription)\n| where eventId has_any (_eventId) //Just in case\n| where aadTenantId has_any (_entraTenantId) //Down here because of obfuscation\n| where tenantDescription has_any (_TenantDescription) //Down here because of obfuscation\n| extend entraTenantId = tostring(aadTenantId)\n| extend message = iif(isnotempty( message), message, eventDescription)\n| extend eventId = iif(isempty(eventId), eventId1, eventId)\n| extend eventDescription = iif(isempty( eventDescription),message, eventDescription )",
            "usedVariables": [
                "_CompanyFilter",
                "_MessageFilter",
                "_TenantDescription",
                "_componentVersionFilter",
                "_customDimensionsContains",
                "_endTime",
                "_entraTenantId",
                "_environmentName",
                "_eventId",
                "_extensionName",
                "_startTime",
                "entraTenantIdDescriptions"
            ]
        },
        {
            "id": "4fc30c98-eb38-4636-99b9-a77977aae48f",
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "externaldata(entraTenantId :string, tenantDescription:string)\n        [h@'https://raw.githubusercontent.com/waldo1001/waldo.BCTelemetry/master/Azure%20Data%20Explorer/ExternalData/entraTenantId.json']\n            with(format='multijson');",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "externaldata(eventId :string, eventArea:string, eventDescription:string)\n        [h@'https://raw.githubusercontent.com/waldo1001/waldo.BCTelemetry/master/Azure%20Data%20Explorer/ExternalData/Signals.json']\n            with(format='multijson')\n| where eventDescription contains _MessageFilter\n| summarize by eventArea;",
            "id": "e2f84e0b-a695-4849-9d35-490a772e8cf2",
            "usedVariables": [
                "_MessageFilter"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where isnotempty(customDimensions.aadTenantId)\n| extend entraTenantId = tostring(customDimensions.aadTenantId)\n| summarize by entraTenantId\n| project entraTenantId",
            "id": "015175f5-aebb-4fa7-bc26-c127da6a2e48",
            "usedVariables": [
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "traces\n| where customDimensions.extensionPublisher <> 'Microsoft'\n| where isnotempty(customDimensions.extensionName)\n| extend extensionName = tostring(customDimensions.extensionName)\n| summarize by extensionName",
            "id": "75608332-b632-4e04-9ec6-34f23199b068",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "let TempAllTraces = \n    traces\n    | where message contains _MessageFilter\n    | extend aadTenantId = tostring(customDimensions.aadTenantId)\n    | where aadTenantId has_any (_entraTenantId);\nentraTenantIdDescriptions\n| join kind=rightouter TempAllTraces on $left.entraTenantId == $right.aadTenantId\n| extend entraTenantId = tostring(aadTenantId)\n| extend tenantDescription = iif(isempty(tenantDescription),tostring(aadTenantId),tenantDescription)\n| summarize by tenantDescription",
            "id": "26fcd603-d7ce-4ab7-91a4-afe3a1042f02",
            "usedVariables": [
                "_MessageFilter",
                "_entraTenantId"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "entraTenantIdDescriptions\n| where tenantDescription has_any (_TenantDescription);\nlet Environments = \n    traces\n    | where timestamp between (_startTime .. _endTime)\n    | extend aadTenantId = tostring(customDimensions.aadTenantId)\n    | extend environmentName = tostring(customDimensions.environmentName)\n    | summarize by aadTenantId, environmentName;\nEnvironments\n| join kind=rightouter entraTenantIdDescriptions on $left.aadTenantId == $right.entraTenantId\n| summarize by environmentName;",
            "id": "13d3df97-ba8a-4c8b-b5fe-fc54ed6f2bc9",
            "usedVariables": [
                "_TenantDescription",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "05ae5610-5603-45ac-9458-616539c1c150"
            },
            "text": "traces\n| where timestamp between (_startTime .. _endTime)\n| where isnotempty(customDimensions.eventId)\n| extend submsg = iif(substring(message, 0, 4) == \"Task\", \"Task Executed\", \n                    iif(customDimensions.eventId == \"AL0000JRG\", \"Job Queue Error\",\n                        iff(indexof(message, \":\") <= 0, message, substring(message, 0, indexof(message, \":\")))))\n| extend eventId = customDimensions.eventId\n    , status = iif(submsg has \"called\" \n                    or submsg has \"executed\"\n                        or submsg has 'executed'\n                            or submsg has 'succeeded'\n                                or submsg has 'rendered'\n                                    or submsg has 'successfully'\n                                        or submsg has 'taken', \"success\",\n                    iif(submsg has \"error\"\n                            or submsg has 'fail'\n                                or submsg has 'failed'\n                                    or submsg has 'deadlock'\n                                        or submsg has 'timed out',\"error\",\n                        iif(message has 'exceeded', 'too slow',\n                            \"unknown\")))\n| where submsg contains _MessageFilter\n| extend eventDescription = strcat(\"(\",eventId,\") \",submsg)\n| summarize count = count() by tostring(eventId), tostring(eventDescription)\n| order by ['count'] desc\n",
            "id": "62ba0cc1-d23a-4871-aed7-2687fdee4a33",
            "usedVariables": [
                "_MessageFilter",
                "_endTime",
                "_startTime"
            ]
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "9b59ad62-82a8-43d2-afbd-0ec79d1e313c"
            },
            "text": "traces\n| where customDimensions has 'AL0000DGF'\n| where customDimensions.eventId == 'AL0000DGF'\n| where customDimensions.alOperation == 'Scenario'\n| extend CodeunitName = tostring(customDimensions.alCodeunitName)\n| summarize by CodeunitName\n",
            "id": "038e3570-fa2d-4fb9-8c33-155e9bb50535",
            "usedVariables": []
        },
        {
            "dataSource": {
                "kind": "inline",
                "dataSourceId": "9b59ad62-82a8-43d2-afbd-0ec79d1e313c"
            },
            "text": "traces\n| where customDimensions has 'AL0000DGF'\n| where customDimensions.eventId == 'AL0000DGF'\n| extend tag = iif(customDimensions.alTag contains_cs \"PTE\", \"PTE\", \n                iif(customDimensions.alTag contains \"Focus\", \"CustSpecific\"\n                    , tostring(customDimensions.alTag)))\n| summarize by tag",
            "id": "3aec6617-0a19-4885-b364-68f9d040c49b",
            "usedVariables": []
        }
    ]
}